// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String              @id @default(auto()) @map("_id") @db.ObjectId
  phone           String              @unique
  password        String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  student         Student?
  tutor           Tutor?
  employee        Employee?
  welcomeState    UserWelcomeScreen[]
  deletedRequests DeletedRequest[]    @relation("UserToDeletedRequest")
}

model Student {
  id                        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                    String    @unique @db.ObjectId
  user                      User      @relation(fields: [userId], references: [id])
  chats                     Chat[]    @relation("StudentChats")
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  name                      String
  phone                     String    @unique
  email                     String?
  isVerifedEmail            Boolean   @default(false)
  telegram                  String?
  skype                     String?
  region                    String
  avatarUrl                 String?
  isNotifications           Boolean   @default(true) // "Получать уведомления"
  isNotificationsResponse   Boolean   @default(true) // для "Откликов от репетиторов"
  isNotificationsPromo      Boolean   @default(true)
  isNotificationsSms        Boolean   @default(true)
  isNotificationsEmail      Boolean   @default(true)
  isNotificationsTelegram   Boolean   @default(true)
  isNotificationsMobilePush Boolean   @default(true)
  isNotificationsWebPush    Boolean   @default(true)
  isNotificationsVk         Boolean   @default(true)
  status                    String
  orders                    Order[]
  reviews                   Review[]  @relation("StudentReviews")
  lastOnline                DateTime? // Дата последнего захода (если есть активность)
}

model Tutor {
  id                        String              @id @default(auto()) @map("_id") @db.ObjectId
  userId                    String              @unique @db.ObjectId
  user                      User                @relation(fields: [userId], references: [id])
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  name                      String?
  phone                     String              @unique
  email                     String?
  isVerifedEmail            Boolean             @default(false)
  telegram                  String?
  skype                     String?
  avatarUrl                 String?
  subject                   String[]            @default([])
  subjectComments           Json                @default("[]")
  region                    String?
  tutorPlace                String[]            @default([])
  tutorAdress               String?
  tutorHomeLoc              String[]            @default([])
  tutorTrip                 String[]            @default([])
  tutorTripCityData         String?
  tutorTripCity             String[]            @default([])
  tutorTripArea             String[]            @default([])
  profileInfo               String?
  experience                String?
  educations                TutorEducation[] 
  documents                 TutorDocument[]
  isGroup                   Boolean             @default(false)
  status                    String
  response                  Response[]
  chats                     Chat[]              @relation("TutorsChats")
  contracts                 Contract[]          @relation("TutorContracts")
  subjectPrices             TutorSubjectPrice[] @relation("TutorToSubjectPrices")
  isPublicProfile           Boolean             @default(true) // для "Публичной анкеты"
  isStudentResponses        Boolean             @default(true) // для "Получать отклики от учеников"
  isNotifications           Boolean             @default(true) // "Получать уведомления"
  isNotificationsOrders     Boolean             @default(true) // для "Новых заказов"
  isNotificationsResponse   Boolean             @default(true) // для "Откликов от учеников"
  isNotificationsPromo      Boolean             @default(true)
  isNotificationsSms        Boolean             @default(true)
  isNotificationsEmail      Boolean             @default(true)
  isNotificationsTelegram   Boolean             @default(true)
  isNotificationsMobilePush Boolean             @default(true)
  isNotificationsWebPush    Boolean             @default(true)
  isNotificationsVk         Boolean             @default(true)
  badges                    String[]            @default([]) // Список шильдиков
  reviews                   Review[]            @relation("TutorReviews")
  publicRating              Float               @default(4.5)  // видимый пользователям рейтинг, рассчитывается и обновляется периодически
  internalRating            Float               @default(4.5)  // внутренний рейтинг, учитывает все факторы
  employeesRating           Float               @default(0)    // внутренний рейтинг для админов
  contractCount             Int                 @default(0)   // кол-во договоренностей
  contractRejectCount       Int                 @default(0)   // кол-во отмены по договоренностям
  averagePay                Float               @default(0)   // средний платеж
  refundsPayCount           Int                 @default(0)   // кол-во возвратов по откликам
  reviewsCount              Int                 @default(0)   // количество отзывов
  averageReviewScore        Float               @default(0)   // средний балл отзывов
  responseTimeSeconds       Int                 @default(0)   // среднее время отклика (в секундах)
  responseCount             Int                 @default(0)   // количество откликов
  sessionCount              Int                 @default(0)   // кол-во сессий
  hasQualityAvatar          Boolean             @default(false)
  hasSubjectPrices          Boolean             @default(false)
  hasPriceComments          Boolean             @default(false)
  hasProfileInfo            Boolean             @default(false)
  hasEducation              Boolean             @default(false)
  hasEducationPhotos        Boolean             @default(false)
  lastOnline                DateTime? // Дата последнего захода (если есть активность)
}

model TutorSubjectPrice {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  tutorId   String @db.ObjectId
  tutor     Tutor  @relation("TutorToSubjectPrices", fields: [tutorId], references: [id], onDelete: Cascade)
  subjectId String // id предмета
  format    String // "online" | "home" | "travel" | "group"
  price     Int
  duration  String // "45" | "60" | "90" | "120" | "day"

  @@unique([tutorId, subjectId, format]) // Уникальная комбинация
}

model TutorEducation {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  tutorId            String   @db.ObjectId
  tutor              Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  educationInfo      String // Название вуза, факультет, специализация
  educationStartYear String // Год начала обучения
  educationEndYear   String? // Год окончания обучения (опционально, если еще учится)
  educationDiplomUrl String[] // УРЛ на фото диплома
  isShowDiplom       Boolean  @default(false) // Показывать ли фото диплома ученикам
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model TutorDocument {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  tutorId     String   @db.ObjectId
  tutor       Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  description String? // Описание документа
  documentUrl String // УРЛ на фото документа
  isShow      Boolean  @default(false) // Показывать ли ученикам
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Employee {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  phone     String    @unique
  email     String?   @unique
  region    String?
  role      String
  status    String
}

model Order {
  id                     String     @id @default(auto()) @map("_id") @db.ObjectId
  studentId              String     @db.ObjectId
  student                Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  chats                  Chat[]     @relation("Chats")
  response               Response[]
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  subject                String
  goal                   String?
  studentType            String?
  studentYears           String?
  studentClass           String?
  studentCourse          String?
  studentUniversity      String?
  studentExam            String?
  studyMethod            String?
  studyProgramm          String?
  deadline               String?
  studentLevel           String?
  tutorGender            String?
  studentSchedule        String?
  studentPlace           String[]
  region                 String
  studentAdress          String?
  studentTrip            String[]   @default([])
  studentHomeLoc         String[]   @default([])
  tutorType              String?
  autoContactsOnResponse Boolean?
  studentWishes          String?
  responseCost           String?
  contracts              Contract[] @relation("OrderContracts")
  reviews                Review[]   @relation("OrderReviews")
  status                 String
}

model Contract {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId

  orderId    String   @db.ObjectId
  order      Order    @relation("OrderContracts", fields: [orderId], references: [id], onDelete: Cascade)

  tutorId    String   @db.ObjectId
  tutor      Tutor    @relation("TutorContracts", fields: [tutorId], references: [id], onDelete: Cascade)

  selectedBy String   // "student" | "tutor"
  comments   Comment[] @relation("ContractComments")
  selectedAt DateTime @default(now())
  canceledAt DateTime?
}

model Response {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tutorId   String   @db.ObjectId
  tutor     Tutor    @relation(fields: [tutorId], references: [id])
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  text      String
  createdAt DateTime @default(now())
}

model WelcomeScreen {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  content            String
  link               String?
  userType           String // Для какого типа пользователя этот скрин
  page               String // Опционально: Указывает, для какой страницы предназначен экран
  group              String // Объединение скринов в группы
  order              Int // Порядок показа экранов
  isActive           Boolean             @default(false) // Контроль показа экрана
  userWelcomeScreens UserWelcomeScreen[] // Это поле указывает на все связанные записи в UserWelcomeScreen
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model UserWelcomeScreen {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  welcomeId     String        @db.ObjectId
  viewedAt      DateTime      @default(now()) // Время просмотра экрана
  user          User          @relation(fields: [userId], references: [id])
  welcomeScreen WelcomeScreen @relation(fields: [welcomeId], references: [id])

  @@unique([userId, welcomeId]) // Уникальная связь между пользователем и экраном
  @@index([userId]) // Индекс для ускорения выборки по пользователю
  @@index([welcomeId]) // Индекс для ускорения выборки по экрану
}

model City {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  title          String         @unique
  area           String
  shortTitle     String
  districts      District[]
  regionalCities RegionalCity[]
}

model District {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  title  String
  metros Metro[]
  cityId String  @db.ObjectId
  city   City    @relation(fields: [cityId], references: [id])
}

model Metro {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  color      String?
  lineName   String?
  lineNumber String?
  districtId String   @db.ObjectId
  district   District @relation(fields: [districtId], references: [id])
}

model RegionalCity {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  title  String
  cityId String @db.ObjectId
  city   City   @relation(fields: [cityId], references: [id])
}

model Topic {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  order          Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  visibleToRoles String[]
  themes         Theme[]
}

model Theme {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  topicId        String   @db.ObjectId // Ссылка на `Topic`
  title          String
  content        String
  order          Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  topic          Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  visibleToRoles String[]
}

model DeletedRequest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?  @db.ObjectId
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull, name: "UserToDeletedRequest")
  role        String // "tutor" или "student"
  requestedAt DateTime @default(now())
  expiresAt   DateTime // Дата окончательного удаления
  answer      String?

  @@unique([userId, role]) // Гарантирует, что у одного юзера не будет двух запросов на одну роль
}

model Chat {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String?    @db.ObjectId
  student        Student?  @relation("StudentChats", fields: [studentId], references: [id], onDelete: SetNull)
  tutorId        String?    @db.ObjectId
  tutor          Tutor?     @relation("TutorsChats", fields: [tutorId], references: [id], onDelete: SetNull)
  orderId        String    @db.ObjectId
  order          Order     @relation("Chats", fields: [orderId], references: [id])
  messages       Message[] @relation("ChatMessages")
  tutorHasAccess Boolean   @default(false)
  themeOrder     String?
  initiatorRole  String?
  status         String?
  createdAt      DateTime  @default(now())
}

model Message {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId        String   @db.ObjectId
  chat          Chat     @relation("ChatMessages", fields: [chatId], references: [id], onDelete: Cascade)
  senderId      String   @db.ObjectId
  text          String

  type          String?    @default("user") // "user" или "service"
  recipientRole String?   // null — для всех участников чата, или "student" | "tutor" | "admin" и т.п.

  isRead        Boolean  @default(false)
  createdAt     DateTime @default(now())
}

model Subject {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @unique
  for_request String
  for_chpu    String
  id_cat      String
  general     Boolean
  nextPage    String
  id_p        String
  goal_id     String
}

model Comment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId

  contractId  String?   @db.ObjectId
  contract    Contract? @relation("ContractComments", fields: [contractId], references: [id], onDelete: Cascade)
  reviewId    String?   @db.ObjectId
  review      Review?   @relation("ReviewComments", fields: [reviewId], references: [id], onDelete: Cascade)

  senderId    String    @db.ObjectId
  senderRole  String    // "student" | "tutor" | "admin"
  text        String
  createdAt   DateTime  @default(now())
}

model Review {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId

  orderId     String    @db.ObjectId
  order       Order    @relation("OrderReviews", fields: [orderId], references: [id], onDelete: Cascade)

  tutorId     String?   @db.ObjectId
  tutor       Tutor?    @relation("TutorReviews", fields: [tutorId], references: [id], onDelete: Cascade)

  studentId   String?   @db.ObjectId
  student     Student?  @relation("StudentReviews", fields: [studentId], references: [id], onDelete: Cascade)

  authorRole  String    // "student" | "tutor"
  message     String
  rating      Int 
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  comments    Comment[] @relation("ReviewComments")
}
