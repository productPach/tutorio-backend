const axios = require("axios");
const cron = require("node-cron");
const { prisma } = require("../prisma/prisma-client");
const path = require("path");
const fs = require("fs").promises;
const MAILOPOST_API_URL = "https://api.mailopost.ru/v1";
const API_TOKEN = "bc45c119ceb875aaa808ef2ee561c5d9";

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º —É–¥–∞–ª–µ–Ω–∏—è (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00)
const deleteExpiredUsers = () => {
  cron.schedule("22 17 * * *", async () => {
    console.log("üîÑ –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á–∏ –ø–æ —É–¥–∞–ª–µ–Ω–∏—é —É—á–µ–Ω–∏–∫–æ–≤ –∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤...");

    try {
      const nowUtc = new Date().toISOString(); // –ü—Ä–∏–≤–æ–¥–∏–º –∫ UTC –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, —Å—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç—ë–∫
      const expiredRequests = await prisma.deletedRequest.findMany({
        where: { expiresAt: { lte: nowUtc } },
      });

      console.log("–¢–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è:", nowUtc);
      console.log("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:", expiredRequests);

      for (const request of expiredRequests) {
        const { userId, role } = request;
        let email;

        if (role === "student") {
          if (!userId) {
            console.error(
              "‚ö†Ô∏è userId is null –∏–ª–∏ undefined, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å."
            );
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
          }

          const student = await prisma.student.findUnique({
            where: { userId },
          });
          if (student) {
            email = student.email; // –ü–æ–ª—É—á–∞–µ–º email —Å—Ç—É–¥–µ–Ω—Ç–∞
            // –°–¥–µ–ª–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç–∫–ª–∏–∫–æ–≤!!!
            await prisma.student.deleteMany({ where: { userId } });
            console.log(`‚úÖ –£–¥–∞–ª—ë–Ω —Å—Ç—É–¥–µ–Ω—Ç —Å userId: ${userId}`);
          }
        } else if (role === "tutor") {
          if (!userId) {
            console.error(
              "‚ö†Ô∏è userId is null –∏–ª–∏ undefined, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å."
            );
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
          }

          const tutor = await prisma.tutor.findUnique({ where: { userId } });
          if (tutor) {
            email = tutor.email; // –ü–æ–ª—É—á–∞–µ–º email —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
            // –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∏–ø–ª–æ–º–æ–≤
            const educations = await prisma.tutorEducation.findMany({
              where: { tutor: { userId } },
            });

            await Promise.all(
              educations.flatMap((education) =>
                education.educationDiplomUrl.map(async (url) => {
                  const fileName = path.basename(url);
                  const filePath = path.resolve("uploads/diplomas", fileName);
                  try {
                    await fs.unlink(filePath).catch((err) => {
                      if (err.code === "ENOENT") {
                        console.log(
                          `‚ö†Ô∏è –§–∞–π–ª –¥–∏–ø–ª–æ–º–∞ —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${filePath}`
                        );
                      } else {
                        console.error(
                          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–∏–ø–ª–æ–º–∞: ${filePath}`,
                          err
                        );
                      }
                    });
                    console.log(`üóë –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª –¥–∏–ø–ª–æ–º–∞: ${filePath}`);
                  } catch (error) {
                    console.error(
                      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–∏–ø–ª–æ–º–∞ ${filePath}:`,
                      error
                    );
                  }
                })
              )
            );

            if (tutor && tutor.avatarUrl) {
              const avatarPath = path.resolve(
                "uploads",
                tutor.avatarUrl.replace(/^\/uploads\//, "") // –£–±–∏—Ä–∞–µ–º `/uploads/` –∏–∑ –ø—É—Ç–∏
              );
              try {
                await fs.unlink(avatarPath).catch((err) => {
                  if (err.code === "ENOENT") {
                    console.log(
                      `‚ö†Ô∏è –§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞ —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${avatarPath}`
                    );
                  } else {
                    console.error(
                      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞: ${avatarPath}`,
                      err
                    );
                  }
                });
                console.log(`üóë –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞: ${avatarPath}`);
              } catch (error) {
                console.error(
                  `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞ ${avatarPath}:`,
                  error
                );
              }
            }

            await prisma.tutor.deleteMany({ where: { userId } });
            console.log(`‚úÖ –£–¥–∞–ª—ë–Ω —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä —Å userId: ${userId}`);
          }
        }

        if (email) {
          // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
          try {
            const response = await axios.post(
              `${MAILOPOST_API_URL}/email/templates/1464084/messages`, // ID —à–∞–±–ª–æ–Ω–∞ –ø–∏—Å—å–º–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
              {
                to: email,
              },
              {
                headers: {
                  Authorization: `Bearer ${API_TOKEN}`, // –ó–∞–º–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API —Ç–æ–∫–µ–Ω
                  "Content-Type": "application/json",
                },
              }
            );
            console.log(
              `üìß –ü–∏—Å—å–º–æ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}, —Å—Ç–∞—Ç—É—Å: ${response.status}`
            );
          } catch (error) {
            console.error(
              `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞ ${email}:`,
              error
            );
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∞—Å—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥—Ä—É–≥–∞—è —Ä–æ–ª—å
        const hasStudent = await prisma.student.findFirst({
          where: { userId },
        });
        const hasTutor = await prisma.tutor.findFirst({ where: { userId } });

        if (!hasStudent && !hasTutor) {
          await prisma.user.delete({ where: { id: userId } });
          console.log(
            `‚úÖ –£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ä–æ–ª–µ–π`
          );
        }

        // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ **–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π** –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ (–ø–æ userId –∏ role)
        // await prisma.deletedRequest.delete({
        //   where: { userId_role: { userId, role } },
        // });
        // console.log(
        //   `üóë –£–¥–∞–ª—ë–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è userId: ${userId}, role: ${role}`
        // );
      }

      console.log("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ cron-–∑–∞–¥–∞—á–∏.");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    }
  });
};

module.exports = deleteExpiredUsers;
