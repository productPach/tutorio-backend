const cron = require("node-cron");
const { prisma } = require("../prisma/prisma-client");

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º —É–¥–∞–ª–µ–Ω–∏—è (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00)
const deleteExpiredUsers = () => {
  cron.schedule("0 0 * * *", async () => {
    console.log(
      "üîÑ –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á–∏ –ø–æ —É–¥–∞–ª–µ–Ω–∏—é —É—á–µ–Ω–∏–∫–æ–≤ –∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ —Å –∏—Å—Ç–µ–∫—â–∏–º —Å—Ä–æ–∫–æ–º –∑–∞–ø—Ä–æ—Å–∞..."
    );

    try {
      const now = new Date();

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, —Å—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç—ë–∫
      const expiredRequests = await prisma.deletedRequest.findMany({
        where: {
          expiresAt: { lte: now },
        },
      });

      for (const request of expiredRequests) {
        const { userId, student, tutor } = request;

        if (student) {
          await prisma.student.delete({ where: { userId } });
          console.log(`‚úÖ –£–¥–∞–ª—ë–Ω —Å—Ç—É–¥–µ–Ω—Ç —Å userId: ${userId}`);
        } else if (tutor) {
          await prisma.tutor.delete({ where: { userId } });
          console.log(`‚úÖ –£–¥–∞–ª—ë–Ω —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä —Å userId: ${userId}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∞—Å—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥—Ä—É–≥–∞—è —Ä–æ–ª—å
        // const hasStudent = await prisma.student.findUnique({ where: { userId } });
        // const hasTutor = await prisma.tutor.findUnique({ where: { userId } });

        // if (!hasStudent && !hasTutor) {
        //   await prisma.user.delete({ where: { id: userId } });
        //   console.log(`‚úÖ –£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ä–æ–ª–µ–π`);
        // }

        // // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ DeletedRequest
        // await prisma.deletedRequest.delete({ where: { userId } });
        // console.log(`üóë –£–¥–∞–ª—ë–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è userId: ${userId}`);
      }

      console.log("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ cron-–∑–∞–¥–∞—á–∏.");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    }
  });
};

module.exports = deleteExpiredUsers;
