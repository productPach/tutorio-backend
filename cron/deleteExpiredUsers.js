const cron = require("node-cron");
const { prisma } = require("../prisma/prisma-client");
const path = require("path");
const fs = require("fs").promises;

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º —É–¥–∞–ª–µ–Ω–∏—è (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00)
const deleteExpiredUsers = () => {
  cron.schedule("00 11 * * *", async () => {
    console.log("üîÑ –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á–∏ –ø–æ —É–¥–∞–ª–µ–Ω–∏—é —É—á–µ–Ω–∏–∫–æ–≤ –∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤...");

    try {
      const nowUtc = new Date().toISOString(); // –ü—Ä–∏–≤–æ–¥–∏–º –∫ UTC –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, —Å—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç—ë–∫
      const expiredRequests = await prisma.deletedRequest.findMany({
        where: { expiresAt: { lte: nowUtc } },
      });

      console.log("–¢–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è:", nowUtc);
      console.log("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:", expiredRequests);

      for (const request of expiredRequests) {
        const { userId, role } = request;

        if (role === "student") {
          await prisma.student.deleteMany({ where: { userId } });
          console.log(`‚úÖ –£–¥–∞–ª—ë–Ω —Å—Ç—É–¥–µ–Ω—Ç —Å userId: ${userId}`);
        } else if (role === "tutor") {
          // –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∏–ø–ª–æ–º–æ–≤
          const educations = await prisma.tutorEducation.findMany({
            where: { tutor: { userId } },
          });

          await Promise.all(
            educations.flatMap((education) =>
              education.educationDiplomUrl.map(async (url) => {
                const fileName = path.basename(url);
                const filePath = path.resolve("uploads/diplomas", fileName);
                try {
                  await fs.unlink(filePath); // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–∏–ø–ª–æ–º–∞
                  console.log(`üóë –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª –¥–∏–ø–ª–æ–º–∞: ${filePath}`);
                } catch (error) {
                  console.error(
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–∏–ø–ª–æ–º–∞ ${filePath}:`,
                    error
                  );
                }
              })
            )
          );

          // –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
          const tutor = await prisma.tutor.findUnique({
            where: { userId },
          });

          if (tutor && tutor.avatarUrl) {
            const avatarPath = path.resolve(
              "uploads",
              tutor.avatarUrl.replace(/^\/uploads\//, "") // –£–±–∏—Ä–∞–µ–º `/uploads/` –∏–∑ –ø—É—Ç–∏
            );
            try {
              await fs.unlink(avatarPath);
              console.log(`üóë –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞: ${avatarPath}`);
            } catch (error) {
              console.error(
                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞ ${avatarPath}:`,
                error
              );
            }
          }

          await prisma.tutor.deleteMany({ where: { userId } });
          console.log(`‚úÖ –£–¥–∞–ª—ë–Ω —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä —Å userId: ${userId}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∞—Å—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥—Ä—É–≥–∞—è —Ä–æ–ª—å
        //   const hasStudent = await prisma.student.findFirst({ where: { userId } });
        //   const hasTutor = await prisma.tutor.findFirst({ where: { userId } });

        //   if (!hasStudent && !hasTutor) {
        //     await prisma.user.delete({ where: { id: userId } });
        //     console.log(`‚úÖ –£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ä–æ–ª–µ–π`);
        //   }

        // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ **–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π** –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ (–ø–æ userId –∏ role)
        // await prisma.deletedRequest.delete({
        //   where: { userId_role: { userId, role } },
        // });
        // console.log(
        //   `üóë –£–¥–∞–ª—ë–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è userId: ${userId}, role: ${role}`
        // );
      }

      console.log("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ cron-–∑–∞–¥–∞—á–∏.");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    }
  });
};

module.exports = deleteExpiredUsers;
