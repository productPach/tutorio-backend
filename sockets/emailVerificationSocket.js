const jwt = require("jsonwebtoken");

const socketConnections = {}; // { tutorId: [socketId1, socketId2] }
const pendingMessages = {}; // { tutorId: true }

module.exports = (io) => {
  io.on("connection", (socket) => {
    console.log(`üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);

    socket.on("verifyEmail", (token) => {
      try {
        const decoded = jwt.verify(token, process.env.SECRET_KEY);
        const { tutorId } = decoded;

        console.log(
          `üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—á—Ç—ã –¥–ª—è tutorId: ${tutorId}`
        );

        if (!socketConnections[tutorId]) {
          socketConnections[tutorId] = [];
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫–µ—Ç –≤ —Å–ø–∏—Å–æ–∫
        if (!socketConnections[tutorId].includes(socket.id)) {
          socketConnections[tutorId].push(socket.id);
        }

        console.log(
          `üì° –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–∫–µ—Ç—ã –¥–ª—è tutorId ${tutorId}:`,
          socketConnections[tutorId]
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ–∫–µ—Ç–∞–º —ç—Ç–æ–≥–æ tutorId
        if (socketConnections[tutorId].length > 0) {
          socketConnections[tutorId].forEach((socketId) => {
            io.to(socketId).emit("emailVerified", { tutorId });
            console.log(
              `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ "emailVerified" –¥–ª—è tutorId: ${tutorId} –Ω–∞ —Å–æ–∫–µ—Ç: ${socketId}`
            );
          });
        } else {
          console.log(
            `‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–∫–µ—Ç–æ–≤ –¥–ª—è tutorId: ${tutorId}, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ`
          );
          pendingMessages[tutorId] = true;
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error.message);
        socket.emit("emailVerificationError", {
          error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω",
        });
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    socket.on("authenticate", (token) => {
      try {
        const decoded = jwt.verify(token, process.env.SECRET_KEY);
        const { tutorId } = decoded;

        if (!socketConnections[tutorId]) {
          socketConnections[tutorId] = [];
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫–µ—Ç –≤ —Å–ø–∏—Å–æ–∫
        if (!socketConnections[tutorId].includes(socket.id)) {
          socketConnections[tutorId].push(socket.id);
        }

        console.log(
          `üîì –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω tutorId: ${tutorId}, —Å–æ–∫–µ—Ç: ${socket.id}`
        );

        // –ï—Å–ª–∏ –±—ã–ª–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        if (pendingMessages[tutorId]) {
          socket.emit("emailVerified", { tutorId });
          console.log(
            `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ "emailVerified" –¥–ª—è tutorId: ${tutorId}`
          );
          delete pendingMessages[tutorId]; // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error.message);
      }
    });

    socket.on("disconnect", () => {
      console.log(`‚ùå –û—Ç–∫–ª—é—á–∏–ª—Å—è —Å–æ–∫–µ—Ç: ${socket.id}`);

      // –£–¥–∞–ª—è–µ–º —Å–æ–∫–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ tutorId
      for (let tutorId in socketConnections) {
        socketConnections[tutorId] = socketConnections[tutorId].filter(
          (id) => id !== socket.id
        );

        if (socketConnections[tutorId].length === 0) {
          delete socketConnections[tutorId];
          console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å–æ–∫–µ—Ç—ã –¥–ª—è tutorId: ${tutorId}`);
        }
      }
    });
  });
};
