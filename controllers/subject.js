const { prisma } = require("../prisma/prisma-client");

const SubjectController = {
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
  createSubject: async (req, res) => {
    try {
      const subjects = Array.isArray(req.body) ? req.body : [req.body];
      const createdSubjects = [];

      for (const subject of subjects) {
        const {
          title,
          for_request,
          for_chpu,
          id_cat,
          general,
          nextPage,
          id_p,
          goalCategoryId,
          // goal_id,
        } = subject;

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (
          !title ||
          !for_request ||
          !for_chpu ||
          !id_cat ||
          general === undefined ||
          !nextPage ||
          !id_p ||
          !goalCategoryId
          // !goal_id
        ) {
          return res.status(400).json({
            error:
              "–í—Å–µ –ø–æ–ª—è (title, for_request, for_chpu, id_cat, general, nextPage, id_p, goalCategoryId) —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏",
          });
        }

        // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å title
        const existing = await prisma.subject.findUnique({
          where: { title },
        });

        if (existing) {
          return res.status(400).json({
            error: `–ü—Ä–µ–¥–º–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${title}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`,
          });
        }

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ü–µ–ª–µ–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const category = await prisma.goalCategory.findUnique({
          where: { id: goalCategoryId },
        });

        if (!category) {
          return res.status(400).json({
            error: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ü–µ–ª–µ–π —Å id "${goalCategoryId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`,
          });
        }

        // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        const created = await prisma.subject.create({
          data: {
            title,
            for_request,
            for_chpu,
            id_cat,
            general,
            nextPage,
            id_p,
            //goal_id,
            goalCategoryId,
          },
        });

        createdSubjects.push(created);
      }

      return res.status(201).json(createdSubjects);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞(–æ–≤):", error);
      return res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  getAllSubjects: async (req, res) => {
    try {
      const subjects = await prisma.subject.findMany();
      res.status(200).json(subjects);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ ID
  getSubjectById: async (req, res) => {
    const { id } = req.params;

    try {
      const subject = await prisma.subject.findUnique({
        where: { id },
      });

      if (!subject) {
        return res.status(404).json({ error: "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      res.status(200).json(subject);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ id:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
  updateSubject: async (req, res) => {
    try {
      const subjects = Array.isArray(req.body) ? req.body : [req.body];

      const updatedSubjects = [];

      for (const subject of subjects) {
        const {
          id, // —Ç–µ–ø–µ—Ä—å `id` –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ —Ç–µ–ª–∞, –Ω–µ –∏–∑ `req.params`
          title,
          for_request,
          for_chpu,
          id_cat,
          general,
          nextPage,
          id_p,
          //goal_id,
          goalCategoryId,
        } = subject;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (
          !id ||
          !title ||
          !for_request ||
          !for_chpu ||
          !id_cat ||
          general === undefined ||
          !nextPage ||
          !id_p ||
          //!goal_id
          !goalCategoryId
        ) {
          return res.status(400).json({
            error:
              "–í—Å–µ –ø–æ–ª—è (id, title, for_request, for_chpu, id_cat, general, nextPage, id_p, goalCategoryId) —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏",
          });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        const existingSubject = await prisma.subject.findUnique({
          where: { id },
        });

        if (!existingSubject) {
          return res
            .status(404)
            .json({ error: `–ü—Ä–µ–¥–º–µ—Ç —Å id ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
        }

        const updated = await prisma.subject.update({
          where: { id },
          data: {
            title,
            for_request,
            for_chpu,
            id_cat,
            general,
            nextPage,
            id_p,
            //goal_id,
            goalCategoryId,
          },
        });

        updatedSubjects.push(updated);
      }

      return res
        .status(200)
        .json(Array.isArray(req.body) ? updatedSubjects : updatedSubjects[0]);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞(–æ–≤):", error);
      return res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
  deleteSubject: async (req, res) => {
    const { id } = req.params;

    try {
      // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç
      const existingSubject = await prisma.subject.findUnique({
        where: { id },
      });

      if (!existingSubject) {
        return res.status(404).json({ error: "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // üóë –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
      await prisma.subject.delete({
        where: { id },
      });

      res.status(200).json({ message: "–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω" });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
  getGoalsBySubject: async (req, res) => {
    const { subjectId } = req.params;

    try {
      // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π —Ü–µ–ª–µ–π
      const subject = await prisma.subject.findUnique({
        where: { id: subjectId },
        select: { goalCategoryId: true },
      });

      if (!subject) {
        return res.status(404).json({ error: "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∏ GoalToCategory –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const goalLinks = await prisma.goalToCategory.findMany({
        where: { categoryId: subject.goalCategoryId },
        include: { goal: true },
      });

      // 3Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ü–µ–ª–µ–π
      const goals = goalLinks.map((link) => link.goal);

      res.status(200).json(goals);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ goalCategoryId –∏ goal_id –≤ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ id_cat
  migrateGoalIdsToGoalCategories: async (req, res) => {
    try {
      // === —Ä—É—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ id_cat ‚Üí goalCategoryId + goal_id ===
      const mapping = {
        1: {
          goalCategoryId: "68e63dfd2149b86c6923530f",
          goal_id: "3",
          nextPage: "/match/goal/artistic-subjects",
        }, // –ò—Å–∫—É—Å—Å—Ç–≤–æ artistic-subjects
        2: {
          goalCategoryId: "68e63dfd2149b86c69235311",
          goal_id: "7",
          nextPage: "/match/goal/english",
        }, // –Ø–∑—ã–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ english
        3: {
          goalCategoryId: "68e63dfd2149b86c69235312",
          goal_id: "6",
          nextPage: "/match/goal/language-subjects",
        }, // –Ø–∑—ã–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ language-subjects
        4: {
          goalCategoryId: "68e63dfd2149b86c6923530c",
          goal_id: "1",
          nextPage: "/match/goal/school-subjects",
        }, // –®–∫–æ–ª—å–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ school-subjects
        5: {
          goalCategoryId: "68e63dfd2149b86c69235310",
          goal_id: "5",
          nextPage: "/match/goal/special-subjects",
        }, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ special-subjects
        6: {
          goalCategoryId: "68e63dfd2149b86c6923530f",
          goal_id: "3",
          nextPage: "/match/goal/artistic-subjects",
        }, // –ò—Å–∫—É—Å—Å—Ç–≤–æ artistic-subjects
        7: {
          goalCategoryId: "68e63dfd2149b86c69235310",
          goal_id: "5",
          nextPage: "/match/goal/special-subjects",
        }, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ special-subjects
        8: {
          goalCategoryId: "68e63dfd2149b86c6923530c",
          goal_id: "1",
          nextPage: "/match/goal/school-subjects",
        }, // –®–∫–æ–ª—å–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ school-subjects
        9: {
          goalCategoryId: "68e63dfd2149b86c69235310",
          goal_id: "5",
          nextPage: "/match/goal/special-subjects",
        }, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ special-subjects
        10: {
          goalCategoryId: "68e63dfd2149b86c6923530f",
          goal_id: "3",
          nextPage: "/match/goal/artistic-subjects",
        }, // –ò—Å–∫—É—Å—Å—Ç–≤–æ artistic-subjects
        11: {
          goalCategoryId: "68e63dfd2149b86c69235310",
          goal_id: "5",
          nextPage: "/match/goal/special-subjects",
        }, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ special-subjects
        12: {
          goalCategoryId: "68e63dfd2149b86c69235312",
          goal_id: "6",
          nextPage: "/match/goal/language-subjects",
        }, // –Ø–∑—ã–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ language-subjects
        13: {
          goalCategoryId: "68e63dfd2149b86c6923530c",
          goal_id: "1",
          nextPage: "/match/goal/school-subjects",
        }, // –®–∫–æ–ª—å–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ school-subjects
        14: {
          goalCategoryId: "68e63dfd2149b86c6923531b",
          goal_id: "16",
          nextPage: "/match/goal/spanish",
        }, // –ò—Å–ø–∞–Ω—Å–∫–∏–π spanish
        15: {
          goalCategoryId: "68e63dfd2149b86c6923530c",
          goal_id: "1",
          nextPage: "/match/goal/school-subjects",
        }, // –®–∫–æ–ª—å–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ school-subjects
        16: {
          goalCategoryId: "68e63dfd2149b86c6923531c",
          goal_id: "17",
          nextPage: "/match/goal/italian",
        }, // –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π italian
        17: {
          goalCategoryId: "68e63dfd2149b86c69235313",
          goal_id: "8",
          nextPage: "/match/goal/chinese",
        }, // –ö–∏—Ç–∞–π—Å–∫–∏–π chinese
        18: {
          goalCategoryId: "68e63dfd2149b86c6923531d",
          goal_id: "18",
          nextPage: "/match/goal/korean",
        }, // –ö–æ—Ä–µ–π—Å–∫–∏–π korean
        19: {
          goalCategoryId: "68e63dfd2149b86c69235310",
          goal_id: "5",
          nextPage: "/match/goal/special-subjects",
        }, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ special-subjects
        20: {
          goalCategoryId: "68e63dfd2149b86c6923530c",
          goal_id: "1",
          nextPage: "/match/goal/school-subjects",
        }, // –®–∫–æ–ª—å–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ school-subjects
        21: {
          goalCategoryId: "68e63dfd2149b86c6923530e",
          goal_id: "4",
          nextPage: "/match/goal/school-subjects-2",
        }, // –®–∫–æ–ª—å–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ school-subjects-2
        //22: { goalCategoryId: "", goal_id: "22" }, // –ù–£–ñ–ù–ê –û–¢–î–ï–õ–¨–ù–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø –î–õ–Ø –õ–û–ì–û–ü–ï–î–û–í!!
        23: {
          goalCategoryId: "68e63dfd2149b86c6923530d",
          goal_id: "2",
          nextPage: "/match/goal/school-subjects-no-ege",
        }, // –®–∫–æ–ª—å–Ω—ã–µ –±–µ–∑ –ï–ì–≠ school-subjects-no-ege
        24: {
          goalCategoryId: "68e63dfd2149b86c69235310",
          goal_id: "5",
          nextPage: "/match/goal/special-subjects",
        }, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ special-subjects
        25: {
          goalCategoryId: "68e63dfd2149b86c6923530c",
          goal_id: "1",
          nextPage: "/match/goal/school-subjects",
        }, // –®–∫–æ–ª—å–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ school-subjects
        26: {
          goalCategoryId: "68e63dfd2149b86c69235310",
          goal_id: "5",
          nextPage: "/match/goal/special-subjects",
        }, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ special-subjects
        27: {
          goalCategoryId: "68e63dfd2149b86c6923530f",
          goal_id: "3",
          nextPage: "/match/goal/artistic-subjects",
        }, // –ò—Å–∫—É—Å—Å—Ç–≤–æ artistic-subjects
        28: {
          goalCategoryId: "68e63dfd2149b86c69235315",
          goal_id: "10",
          nextPage: "/match/goal/school-subjects",
        }, // –ù–∞—á–∞–ª—å–Ω–∞—è —à–∫–æ–ª–∞ primary-school-subjects
        29: {
          goalCategoryId: "68e63dfd2149b86c69235314",
          goal_id: "9",
          nextPage: "/match/goal/german",
        }, // –ù–µ–º–µ—Ü–∫–∏–π german
        // 30: { goalCategoryId: "", goal_id: "30" }, // –ù–£–ñ–ù–ê –û–¢–î–ï–õ–¨–ù–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø –î–õ–Ø –ù–Ø–ù–ò!!
        31: {
          goalCategoryId: "68e63dfd2149b86c6923530c",
          goal_id: "1",
          nextPage: "/match/goal/school-subjects",
        }, // –®–∫–æ–ª—å–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ school-subjects
        32: {
          goalCategoryId: "68e63dfd2149b86c69235317",
          goal_id: "12",
          nextPage: "/match/goal/preparing-for-school",
        }, // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ preparing-for-school
        33: {
          goalCategoryId: "68e63dfd2149b86c69235312",
          goal_id: "6",
          nextPage: "/match/goal/language-subjects",
        }, // –Ø–∑—ã–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ language-subjects
        34: {
          goalCategoryId: "68e63dfd2149b86c69235310",
          goal_id: "5",
          nextPage: "/match/goal/special-subjects",
        }, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ special-subjects
        35: {
          goalCategoryId: "68e63dfd2149b86c69235318",
          goal_id: "13",
          nextPage: "/match/goal/programming",
        }, // –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ programming
        36: {
          goalCategoryId: "68e63dfd2149b86c69235310",
          goal_id: "5",
          nextPage: "/match/goal/special-subjects",
        }, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ special-subjects
        37: {
          goalCategoryId: "68e63dfd2149b86c69235319",
          goal_id: "14",
          nextPage: "/match/goal/rki",
        }, // –†–ö–ò rki
        38: {
          goalCategoryId: "68e63dfd2149b86c6923530f",
          goal_id: "3",
          nextPage: "/match/goal/artistic-subjects",
        }, // –ò—Å–∫—É—Å—Å—Ç–≤–æ artistic-subjects
        39: {
          goalCategoryId: "68e63dfd2149b86c6923530e",
          goal_id: "4",
          nextPage: "/match/goal/school-subjects-2",
        }, // –®–∫–æ–ª—å–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ school-subjects-2
        40: {
          goalCategoryId: "68e63dfd2149b86c6923530c",
          goal_id: "1",
          nextPage: "/match/goal/school-subjects",
        }, // –®–∫–æ–ª—å–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ school-subjects
        41: {
          goalCategoryId: "68e63dfd2149b86c6923530c",
          goal_id: "1",
          nextPage: "/match/goal/school-subjects",
        }, // –®–∫–æ–ª—å–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ school-subjects
        42: {
          goalCategoryId: "68e63dfd2149b86c6923530e",
          goal_id: "4",
          nextPage: "/match/goal/school-subjects-2",
        }, // –®–∫–æ–ª—å–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ school-subjects-2
        43: {
          goalCategoryId: "68e63dfd2149b86c69235310",
          goal_id: "5",
          nextPage: "/match/goal/special-subjects",
        }, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ special-subjects
        44: {
          goalCategoryId: "68e63dfd2149b86c6923531a",
          goal_id: "15",
          nextPage: "/match/goal/french",
        }, // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π french
        45: {
          goalCategoryId: "68e63dfd2149b86c6923530c",
          goal_id: "1",
          nextPage: "/match/goal/school-subjects",
        }, // –®–∫–æ–ª—å–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ school-subjects
        46: {
          goalCategoryId: "68e63dfd2149b86c69235312",
          goal_id: "6",
          nextPage: "/match/goal/language-subjects",
        }, // –Ø–∑—ã–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ language-subjects
        47: {
          goalCategoryId: "68e63dfd2149b86c6923530e",
          goal_id: "4",
          nextPage: "/match/goal/school-subjects-2",
        }, // –®–∫–æ–ª—å–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ school-subjects-2
        // 48: { goalCategoryId: "", goal_id: "48" }, // –ù–£–ñ–ù–ê –û–¢–î–ï–õ–¨–ù–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø –î–õ–Ø –®–ê–•–ú–ê–¢–´!!
        49: {
          goalCategoryId: "68e63dfd2149b86c6923530d",
          goal_id: "2",
          nextPage: "/match/goal/school-subjects-no-ege",
        }, // –®–∫–æ–ª—å–Ω—ã–µ –±–µ–∑ –ï–ì–≠ school-subjects-no-ege
        50: {
          goalCategoryId: "68e63dfd2149b86c69235310",
          goal_id: "5",
          nextPage: "/match/goal/special-subjects",
        }, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ special-subjects
        51: {
          goalCategoryId: "68e63dfd2149b86c6923531e",
          goal_id: "19",
          nextPage: "/match/goal/japanese",
        }, // –Ø–ø–æ–Ω—Å–∫–∏–π —è–∑—ã–∫ japanese
      };

      const subjects = await prisma.subject.findMany();

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${subjects.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

      let updatedCount = 0;
      const unknownCats = new Set();

      for (const subject of subjects) {
        if (!subject.id_cat) continue;

        const mappingData = mapping[subject.id_cat];

        if (!mappingData) {
          unknownCats.add(subject.id_cat);
          continue;
        }

        await prisma.subject.update({
          where: { id: subject.id },
          data: {
            goalCategoryId: mappingData.goalCategoryId,
            goal_id: mappingData.goal_id,
            nextPage: mappingData.nextPage,
          },
        });

        updatedCount++;
      }

      res.json({
        message: `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.`,
        updated: updatedCount,
        skipped: Array.from(unknownCats),
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ goalCategoryId –∏ goal_id:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö" });
    }
  },
};

module.exports = SubjectController;
