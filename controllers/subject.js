const { prisma } = require("../prisma/prisma-client");

const SubjectController = {
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
  createSubject: async (req, res) => {
    const {
      title,
      for_request,
      for_chpu,
      id_cat,
      general,
      nextPage,
      id_p,
      goal_id,
    } = req.body;

    const userId = req.user.userID;

    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (
        !title ||
        !for_request ||
        !for_chpu ||
        !id_cat ||
        general === undefined || // –≤–∞–∂–Ω–æ: general ‚Äî –±—É–ª–µ–≤—ã–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–Ω–æ
        !nextPage ||
        !id_p ||
        !goal_id
      ) {
        return res.status(400).json({
          error:
            "–í—Å–µ –ø–æ–ª—è (title, for_request, for_chpu, id_cat, general, nextPage, id_p, goal_id) —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏",
        });
      }

      // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
      const existingSubject = await prisma.subject.findUnique({
        where: { title },
      });

      if (existingSubject) {
        return res.status(400).json({
          error: "–ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        });
      }

      // üõ† –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
      const newSubject = await prisma.subject.create({
        data: {
          title,
          for_request,
          for_chpu,
          id_cat,
          general,
          nextPage,
          id_p,
          goal_id,
        },
      });

      res.status(201).json(newSubject);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  getAllSubjects: async (req, res) => {
    try {
      const subjects = await prisma.subject.findMany();
      res.status(200).json(subjects);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ ID
  getSubjectById: async (req, res) => {
    const { id } = req.params;

    try {
      const subject = await prisma.subject.findUnique({
        where: { id },
      });

      if (!subject) {
        return res.status(404).json({ error: "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      res.status(200).json(subject);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ id:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
  updateSubject: async (req, res) => {
    const { id } = req.params;
    const {
      title,
      for_request,
      for_chpu,
      id_cat,
      general,
      nextPage,
      id_p,
      goal_id,
    } = req.body;

    try {
      // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (
        !title ||
        !for_request ||
        !for_chpu ||
        !id_cat ||
        general === undefined ||
        !nextPage ||
        !id_p ||
        !goal_id
      ) {
        return res.status(400).json({
          error:
            "–í—Å–µ –ø–æ–ª—è (title, for_request, for_chpu, id_cat, general, nextPage, id_p, goal_id) —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏",
        });
      }

      // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç
      const existingSubject = await prisma.subject.findUnique({
        where: { id },
      });

      if (!existingSubject) {
        return res.status(404).json({ error: "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
      const updatedSubject = await prisma.subject.update({
        where: { id },
        data: {
          title,
          for_request,
          for_chpu,
          id_cat,
          general,
          nextPage,
          id_p,
          goal_id,
        },
      });

      res.status(200).json(updatedSubject);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
  deleteSubject: async (req, res) => {
    const { id } = req.params;

    try {
      // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç
      const existingSubject = await prisma.subject.findUnique({
        where: { id },
      });

      if (!existingSubject) {
        return res.status(404).json({ error: "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // üóë –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
      await prisma.subject.delete({
        where: { id },
      });

      res.status(200).json({ message: "–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω" });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },
};

module.exports = SubjectController;
