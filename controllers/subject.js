const { prisma } = require("../prisma/prisma-client");

const SubjectController = {
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
  createSubject: async (req, res) => {
    try {
      const subjects = Array.isArray(req.body) ? req.body : [req.body];
      const createdSubjects = [];

      for (const subject of subjects) {
        const {
          title,
          for_request,
          for_chpu,
          id_cat,
          general,
          nextPage,
          id_p,
          goal_id,
        } = subject;

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (
          !title ||
          !for_request ||
          !for_chpu ||
          !id_cat ||
          general === undefined ||
          !nextPage ||
          !id_p ||
          !goal_id
        ) {
          return res.status(400).json({
            error:
              "–í—Å–µ –ø–æ–ª—è (title, for_request, for_chpu, id_cat, general, nextPage, id_p, goal_id) —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏",
          });
        }

        // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å title
        const existing = await prisma.subject.findUnique({
          where: { title },
        });

        if (existing) {
          return res.status(400).json({
            error: `–ü—Ä–µ–¥–º–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${title}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`,
          });
        }

        // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        const created = await prisma.subject.create({
          data: {
            title,
            for_request,
            for_chpu,
            id_cat,
            general,
            nextPage,
            id_p,
            goal_id,
          },
        });

        createdSubjects.push(created);
      }

      return res.status(201).json(createdSubjects);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞(–æ–≤):", error);
      return res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  getAllSubjects: async (req, res) => {
    try {
      const subjects = await prisma.subject.findMany();
      res.status(200).json(subjects);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ ID
  getSubjectById: async (req, res) => {
    const { id } = req.params;

    try {
      const subject = await prisma.subject.findUnique({
        where: { id },
      });

      if (!subject) {
        return res.status(404).json({ error: "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      res.status(200).json(subject);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ id:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
  updateSubject: async (req, res) => {
    try {
      const subjects = Array.isArray(req.body) ? req.body : [req.body];

      const updatedSubjects = [];

      for (const subject of subjects) {
        const {
          id, // —Ç–µ–ø–µ—Ä—å `id` –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ —Ç–µ–ª–∞, –Ω–µ –∏–∑ `req.params`
          title,
          for_request,
          for_chpu,
          id_cat,
          general,
          nextPage,
          id_p,
          goal_id,
        } = subject;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (
          !id ||
          !title ||
          !for_request ||
          !for_chpu ||
          !id_cat ||
          general === undefined ||
          !nextPage ||
          !id_p ||
          !goal_id
        ) {
          return res.status(400).json({
            error:
              "–í—Å–µ –ø–æ–ª—è (id, title, for_request, for_chpu, id_cat, general, nextPage, id_p, goal_id) —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏",
          });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        const existingSubject = await prisma.subject.findUnique({
          where: { id },
        });

        if (!existingSubject) {
          return res
            .status(404)
            .json({ error: `–ü—Ä–µ–¥–º–µ—Ç —Å id ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
        }

        const updated = await prisma.subject.update({
          where: { id },
          data: {
            title,
            for_request,
            for_chpu,
            id_cat,
            general,
            nextPage,
            id_p,
            goal_id,
          },
        });

        updatedSubjects.push(updated);
      }

      return res
        .status(200)
        .json(Array.isArray(req.body) ? updatedSubjects : updatedSubjects[0]);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞(–æ–≤):", error);
      return res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
  deleteSubject: async (req, res) => {
    const { id } = req.params;

    try {
      // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç
      const existingSubject = await prisma.subject.findUnique({
        where: { id },
      });

      if (!existingSubject) {
        return res.status(404).json({ error: "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // üóë –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
      await prisma.subject.delete({
        where: { id },
      });

      res.status(200).json({ message: "–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω" });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },
};

module.exports = SubjectController;
