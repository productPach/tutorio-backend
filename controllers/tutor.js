const { prisma } = require("../prisma/prisma-client");
const jdenticon = require("jdenticon");
const path = require("path");
const fs = require("fs");
const { connect } = require("http2");

const TutorController = {
  // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
  createTutor: async (req, res) => {
    const {
      name,
      phone,
      email,
      avatarUrl,
      subject,
      region,
      tutorPlace,
      tutorAdress,
      tutorTrip,
      status,
    } = req.body;
    const userId = req.user.userID;

    if (!phone || !status) {
      return res
        .status(400)
        .json({ error: "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" });
    }

    let avatarGenerateUrl;

    let filePath;

    if (req.file && req.file.path) {
      filePath = req.file.path;
    } else {
      const png = jdenticon.toPng(name, 200);
      const avatarName = `${name}_${Date.now()}.png`;
      avatarGenerateUrl = path.join(__dirname, "../uploads", avatarName);
      fs.writeFileSync(avatarGenerateUrl, png);
    }

    try {
      const existingTutor = await prisma.tutor.findFirst({
        where: { phone: phone },
      });

      if (existingTutor) {
        return res.status(400).json({
          error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        });
      }

      const tutor = await prisma.tutor.create({
        data: {
          userId,
          name: name || undefined,
          phone,
          email: email || undefined,
          avatarUrl: avatarUrl
            ? `/uploads/${avatarUrl}`
            : `/uploads/${avatarGenerateUrl}`,
          subject: subject || undefined,
          region: region || undefined,
          tutorPlace: tutorPlace || undefined,
          tutorAdress: tutorAdress || undefined,
          tutorTrip: tutorTrip || undefined,
          status: status,
        },
      });
      res.json(tutor);
    } catch (error) {
      console.log("Error Create Tutor", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  verifyEmail: async (req, res) => {
    const { token } = req.query;

    if (!token) {
      return res.status(400).json({ error: "–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º –∏ —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º —Å—Ä–æ–∫–æ–º –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
      const tutor = await prisma.tutor.findFirst({
        where: {
          emailVerificationToken: token,
          emailTokenExpires: { gt: new Date() }, // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
        },
      });

      if (!tutor) {
        return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω" });
      }

      // –ï—Å–ª–∏ email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, —Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
      if (tutor.isVerifedEmail) {
        return res.status(400).json({ error: "Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" });
      }

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
      await prisma.tutor.update({
        where: { id: tutor.id },
        data: {
          isVerifedEmail: true,
          emailVerificationToken: null, // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
          emailTokenExpires: null,
        },
      });

      res.json({ message: "Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω" });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:", error.message);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
  getAllTutors: async (req, res) => {
    try {
      const allTutors = await prisma.tutor.findMany({
        orderBy: {
          createdAt: "desc",
        },
        include: {
          educations: true,
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        },
      });

      if (!allTutors) {
        return res
          .status(404)
          .json({ error: "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞" });
      }

      res.json(allTutors);
    } catch (error) {
      console.error("Get All Tutors Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ ID
  getTutorById: async (req, res) => {
    const { id } = req.params;

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
        include: {
          educations: true,
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      res.json({ tutor });
    } catch (error) {
      console.error("Get Tutor By Id Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
  currentTutor: async (req, res) => {
    try {
      const tutor = await prisma.tutor.findUnique({
        where: { userId: req.user.userID },
        include: {
          educations: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        },
      });

      if (!tutor) {
        return res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞" });
      }

      res.json(tutor);
    } catch (error) {
      console.error("Current Tutor Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
  updateTutor: async (req, res) => {
    const { id } = req.params;
    const {
      name,
      email,
      isVerifedEmail,
      telegram,
      skype,
      subject, // –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      subjectComments,
      region,
      tutorPlace,
      tutorAdress,
      tutorTrip,
      tutorTripCityData,
      tutorTripCity,
      tutorTripArea,
      profileInfo,
      experience,
      isGroup,
      status,
      isPublicProfile,
      isStudentResponses,
      isNotifications,
      isNotificationsOrders,
      isNotificationsResponse,
      isNotificationsPromo,
      isNotificationsSms,
      isNotificationsEmail,
      isNotificationsTelegram,
      isNotificationsMobilePush,
      isNotificationsWebPush,
      isNotificationsVk,
    } = req.body;

    let avatarUrl;
    if (req.file) {
      avatarUrl = req.file.filename;
    }

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
        include: { subjectPrices: true }, // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã
      });

      if (!tutor) {
        return res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞" });
      }

      if (tutor.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      // –ù–∞—Ö–æ–¥–∏–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
      const oldSubjects = tutor.subject || [];
      const newSubjects = subject || [];
      const removedSubjects = oldSubjects.filter(
        (subj) => !newSubjects.includes(subj)
      );

      // –£–¥–∞–ª—è–µ–º —Ü–µ–Ω—ã, –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω (–ù–û –¢–û–õ–¨–ö–û –ï–°–õ–ò subject –ü–†–ò–®–ï–õ –í –ó–ê–ü–†–û–°–ï)
      if (subject !== undefined && removedSubjects.length > 0) {
        await prisma.tutorSubjectPrice.deleteMany({
          where: {
            tutorId: id,
            subjectId: { in: removedSubjects },
          },
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      let updatedComments = tutor.subjectComments;

      if (subject !== undefined) {
        // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —É–¥–∞–ª—ë–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
        updatedComments = updatedComments.filter(
          (comment) => !removedSubjects.includes(comment.subjectId)
        );
      }

      // üî• –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º `subjectComments`
      if (subjectComments !== undefined) {
        const newSubjectIds = subjectComments.map((c) => c.subjectId);
        updatedComments = updatedComments.filter((comment) =>
          newSubjectIds.includes(comment.subjectId)
        );
      }

      // –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
      if (subjectComments !== undefined) {
        for (const newComment of subjectComments) {
          const existingIndex = updatedComments.findIndex(
            (c) => c.subjectId === newComment.subjectId
          );
          if (existingIndex !== -1) {
            updatedComments[existingIndex] = newComment; // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
          } else {
            updatedComments.push(newComment); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
          }
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
      const updatedTutor = await prisma.tutor.update({
        where: { id },
        data: {
          name: name || undefined,
          email: email || undefined,
          isVerifedEmail:
            isVerifedEmail !== undefined
              ? isVerifedEmail
              : tutor.isVerifedEmail,
          telegram: telegram || undefined,
          skype: skype || undefined,
          avatarUrl: avatarUrl ? `/uploads/${avatarUrl}` : tutor.avatarUrl,
          subject: subject || undefined, // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
          region: region || undefined,
          tutorPlace: tutorPlace || undefined,
          tutorAdress: tutorAdress || undefined,
          tutorTrip: tutorTrip || undefined,
          tutorTripCityData: tutorTripCityData || undefined,
          tutorTripCity: tutorTripCity || undefined,
          tutorTripArea: tutorTripArea || undefined,
          profileInfo: profileInfo || undefined,
          experience: experience || undefined,
          isGroup: isGroup !== undefined ? isGroup : tutor.isGroup,
          isPublicProfile:
            isPublicProfile !== undefined
              ? isPublicProfile
              : tutor.isPublicProfile,
          isStudentResponses:
            isStudentResponses !== undefined
              ? isStudentResponses
              : tutor.isStudentResponses,
          isNotifications:
            isNotifications !== undefined
              ? isNotifications
              : tutor.isNotifications,
          isNotificationsOrders:
            isNotificationsOrders !== undefined
              ? isNotificationsOrders
              : tutor.isNotificationsOrders,
          isNotificationsResponse:
            isNotificationsResponse !== undefined
              ? isNotificationsResponse
              : tutor.isNotificationsResponse,
          isNotificationsPromo:
            isNotificationsPromo !== undefined
              ? isNotificationsPromo
              : tutor.isNotificationsPromo,
          isNotificationsSms:
            isNotificationsSms !== undefined
              ? isNotificationsSms
              : tutor.isNotificationsSms,
          isNotificationsEmail:
            isNotificationsEmail !== undefined
              ? isNotificationsEmail
              : tutor.isNotificationsEmail,
          isNotificationsTelegram:
            isNotificationsTelegram !== undefined
              ? isNotificationsTelegram
              : tutor.isNotificationsTelegram,
          isNotificationsVk:
            isNotificationsVk !== undefined
              ? isNotificationsVk
              : tutor.isNotificationsVk,
          isNotificationsMobilePush:
            isNotificationsMobilePush !== undefined
              ? isNotificationsMobilePush
              : tutor.isNotificationsMobilePush,
          isNotificationsWebPush:
            isNotificationsWebPush !== undefined
              ? isNotificationsWebPush
              : tutor.isNotificationsWebPush,
          status: status || undefined,
          ...(subject !== undefined || subjectComments !== undefined
            ? {
                subjectComments: JSON.parse(
                  JSON.stringify([...updatedComments])
                ),
              }
            : {}), // –û–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        },
        include: { subjectPrices: true },
      });

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
      const tutorNew = await prisma.tutor.findUnique({
        where: { id },
        include: {
          educations: true,
          subjectPrices: true, // –ü–æ–¥–≥—Ä—É–∑–∏—Ç —Ü–µ–Ω—ã —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        },
      });

      res.json(tutorNew);
    } catch (error) {
      console.error("Update Tutor Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
  updateTutorAvatar: async (req, res) => {
    const { id } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if (!req.file) {
      return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω" });
    }

    const avatarUrl = req.file.filename; // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (tutor.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
      const updatedTutor = await prisma.tutor.update({
        where: { id },
        data: {
          avatarUrl: `/uploads/${avatarUrl}`, // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        },
      });

      res.json(updatedTutor);
    } catch (error) {
      console.error("Update Tutor Avatar Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
  deleteTutorAvatar: async (req, res) => {
    try {
      const { id } = req.params;

      // –ù–∞–π—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ message: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä
      if (!tutor.avatarUrl) {
        return res
          .status(400)
          .json({ message: "–£ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è" });
      }

      // –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
      const avatarPath = path.resolve(
        "uploads",
        tutor.avatarUrl.replace(/^\/uploads\//, "")
      ); // –£–±–∏—Ä–∞–µ–º /uploads –∏–∑ –ø—É—Ç–∏
      if (fs.existsSync(avatarPath)) {
        fs.unlinkSync(avatarPath); // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
      const updatedTutor = await prisma.tutor.update({
        where: { id },
        data: {
          avatarUrl: null, // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        },
      });

      res.json(updatedTutor);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞" });
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
  deleteTutor: async (req, res) => {
    const { id } = req.params;

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞" });
      }

      if (tutor.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      // –°–î–ï–õ–ê–¢–¨ –£–î–ê–õ–ï–ù–ò–ï –û–¢–ö–õ–ò–ö–û–í!!!
      //   await prisma.response.deleteMany({
      //     where: {
      //       studentId: id,
      //     },
      //   });

      await prisma.tutor.delete({
        where: { id },
      });

      res.send("–†–µ–ø–µ—Ç–∏—Ç–æ—Ä —É–¥–∞–ª–µ–Ω");
    } catch (error) {
      console.error("Delete Tutor Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  addEducation: async (req, res) => {
    const {
      educationInfo,
      educationStartYear,
      educationEndYear,
      isShowDiplom,
    } = req.body;
    const { id } = req.params;

    if (!educationInfo || !educationStartYear) {
      return res
        .status(400)
        .json({ error: "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" });
    }

    let diplomaUrls = [];

    if (req.files && req.files.length > 0) {
      diplomaUrls = req.files.map(
        (file) => `/uploads/diplomas/${file.filename}`
      );
    }

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const education = await prisma.tutorEducation.create({
        data: {
          tutorId: id,
          educationInfo,
          educationStartYear: educationStartYear,
          educationEndYear: educationEndYear ? educationEndYear : null,
          educationDiplomUrl: diplomaUrls, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Å–∏–≤ URL
          isShowDiplom: isShowDiplom === "true",
        },
      });

      const updatedTutor = await prisma.tutor.findUnique({
        where: { id },
        include: {
          educations: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        },
      });

      res.json(updatedTutor);
    } catch (error) {
      console.error("Error adding education:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  updateEducation: async (req, res) => {
    const {
      educationInfo,
      educationStartYear,
      educationEndYear,
      isShowDiplom,
    } = req.body;
    const { id, educationId } = req.params; // id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏ id –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è

    if (!educationInfo || !educationStartYear) {
      return res
        .status(400)
        .json({ error: "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" });
    }

    let diplomaUrls = [];

    if (req.files && req.files.length > 0) {
      diplomaUrls = req.files.map(
        (file) => `/uploads/diplomas/${file.filename}`
      );
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
      const education = await prisma.tutorEducation.findUnique({
        where: { id: educationId },
      });

      if (!education) {
        return res.status(404).json({ error: "–ú–µ—Å—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      const updatedEducation = await prisma.tutorEducation.update({
        where: { id: educationId },
        data: {
          educationInfo,
          educationStartYear,
          educationEndYear,
          educationDiplomUrl:
            diplomaUrls.length > 0
              ? [...education.educationDiplomUrl, ...diplomaUrls] // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∏–ø–ª–æ–º—ã –∫ —Å—Ç–∞—Ä—ã–º
              : education.educationDiplomUrl, // –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö –¥–∏–ø–ª–æ–º–æ–≤ –Ω–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
          isShowDiplom: isShowDiplom === "true", // –ï—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        },
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —Å –º–µ—Å—Ç–∞–º–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      const updatedTutor = await prisma.tutor.findUnique({
        where: { id },
        include: {
          educations: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        },
      });

      res.json(updatedTutor);
    } catch (error) {
      console.error("Error updating education:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  deleteEducation: async (req, res) => {
    const { id, educationId } = req.params; // id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏ id –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (tutor.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
      const education = await prisma.tutorEducation.findUnique({
        where: { id: educationId },
      });

      if (!education) {
        return res.status(404).json({ error: "–ú–µ—Å—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
      }

      // –ï—Å–ª–∏ —É –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –µ—Å—Ç—å —Ñ–∞–π–ª—ã –¥–∏–ø–ª–æ–º–æ–≤, —É–¥–∞–ª—è–µ–º –∏—Ö
      if (
        education.educationDiplomUrl &&
        Array.isArray(education.educationDiplomUrl)
      ) {
        education.educationDiplomUrl.forEach((diplomUrl) => {
          const diplomPath = path.resolve(
            "uploads/diplomas", // –ü–∞–ø–∫–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∏–ø–ª–æ–º—ã
            diplomUrl.replace(/^\/uploads\/diplomas\//, "") // –£–±–∏—Ä–∞–µ–º /uploads/diplomas –∏–∑ –ø—É—Ç–∏
          );

          if (fs.existsSync(diplomPath)) {
            try {
              fs.unlinkSync(diplomPath); // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–∏–ø–ª–æ–º–∞
            } catch (err) {
              console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: ${diplomPath}`, err);
            }
          }
        });
      }

      // –£–¥–∞–ª—è–µ–º –º–µ—Å—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      await prisma.tutorEducation.delete({
        where: { id: educationId },
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —Å –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
      const updatedTutor = await prisma.tutor.findUnique({
        where: { id },
        include: {
          educations: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        },
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
      res.json(updatedTutor);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  deleteDiploma: async (req, res) => {
    const { id, educationId } = req.params;
    const { fileName } = req.body; // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (tutor.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      const education = await prisma.tutorEducation.findUnique({
        where: { id: educationId },
      });

      if (!education) {
        return res.status(404).json({ error: "–ú–µ—Å—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
      }

      // –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
      const filePath = path.resolve("uploads/diplomas", fileName); // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath); // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–∏–ø–ª–æ–º–∞—Ö
      const updatedEducation = await prisma.tutorEducation.update({
        where: { id: educationId },
        data: {
          educationDiplomUrl: {
            // –£–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞
            set: education.educationDiplomUrl.filter(
              (url) => !url.includes(fileName)
            ),
          },
        },
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —Å –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
      const updatedTutor = await prisma.tutor.findUnique({
        where: { id },
        include: {
          educations: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        },
      });

      return res.json(updatedTutor);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ:", error);
      res.status(500).json({ error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
  addSubjectPrice: async (req, res) => {
    const { tutorId, subjectId, format, price, duration } = req.body;

    try {
      await prisma.tutorSubjectPrice.create({
        data: {
          tutorId,
          subjectId,
          format,
          price: Number(price),
          duration,
        },
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
      const tutor = await prisma.tutor.findUnique({
        where: { id: tutorId },
        include: {
          educations: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        }, // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã
      });

      res.status(201).json(tutor);
    } catch (error) {
      console.error("Add Subject Price Error:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
  updateSubjectPrice: async (req, res) => {
    const { id } = req.params; // –ë–µ—Ä–µ–º ID —Ü–µ–Ω—ã –∏–∑ URL
    const { price, duration } = req.body;

    try {
      const existingPrice = await prisma.tutorSubjectPrice.findUnique({
        where: { id },
      });

      if (!existingPrice) {
        return res.status(404).json({ error: "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }

      await prisma.tutorSubjectPrice.update({
        where: { id },
        data: {
          price: Number(price),
          duration,
        },
      });

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —Å —Ü–µ–Ω–∞–º–∏
      const tutor = await prisma.tutor.findUnique({
        where: { id: existingPrice.tutorId },
        include: {
          educations: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        },
      });

      res.json(tutor);
    } catch (error) {
      console.error("Update Subject Price Error:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã" });
    }
  },
};

module.exports = TutorController;
