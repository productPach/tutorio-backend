const { prisma } = require("../prisma/prisma-client");
const path = require("path");
const fs = require("fs");
const jwt = require("jsonwebtoken");
const findTutorsForOrdersAllDataTutor = require("../services/tutors/findTutorsForOrderAllDataTutor");

const TutorController = {
  // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
  createTutor: async (req, res) => {
    const {
      name,
      phone,
      email,
      subject,
      region,
      tutorPlace,
      tutorAdress,
      tutorTrip,
      status,
    } = req.body;
    const userId = req.user.userID;

    if (!phone || !status) {
      return res
        .status(400)
        .json({ error: "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" });
    }

    try {
      const existingTutor = await prisma.tutor.findFirst({
        where: { phone: phone },
      });

      if (existingTutor) {
        return res.status(400).json({
          error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        });
      }

      const tutor = await prisma.tutor.create({
        data: {
          userId,
          name: name || undefined,
          phone,
          email: email || undefined,
          subject: subject || undefined,
          region: region || undefined,
          tutorPlace: tutorPlace || undefined,
          tutorAdress: tutorAdress || undefined,
          tutorTrip: tutorTrip || undefined,
          status: status,
        },
      });
      res.json(tutor);
    } catch (error) {
      console.log("Error Create Tutor", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  verifyEmail: async (req, res) => {
    const { token } = req.query;

    if (!token) {
      return res.status(400).json({ error: "–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    try {
      // üîπ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º tutorId –∏ email
      const decoded = jwt.verify(token, process.env.SECRET_KEY);
      const { userId, email } = decoded;

      // üîπ –ò—â–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ ID –∏ email
      const tutor = await prisma.tutor.findUnique({
        where: { id: userId, email },
      });

      if (!tutor) {
        return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω" });
      }

      // üîπ –ï—Å–ª–∏ email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
      if (tutor.isVerifedEmail) {
        return res.status(400).json({ error: "Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" });
      }

      // üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
      await prisma.tutor.update({
        where: { id: userId },
        data: {
          isVerifedEmail: true,
        },
      });

      res.json({ message: "Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω" });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:", error.message);
      res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ (SECURE)
  getAllTutors: async (req, res) => {
    try {
      const allTutors = await prisma.tutor.findMany({
        orderBy: {
          createdAt: "desc",
        },
        // include: {
        //   educations: true,
        //   subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        // },
        select: {
          id: true,
          userId: true,
          // user: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          avatarUrl: true,
          subject: true,
          subjectComments: true,
          region: true,
          tutorPlace: true,
          tutorAdress: true,
          tutorHomeLoc: true,
          tutorTrip: true,
          tutorTripCityData: true,
          tutorTripCity: true,
          tutorTripArea: true,
          profileInfo: true,
          experience: true,
          educations: true,
          documents: true,
          isGroup: true,
          status: true,
          subjectPrices: true,
          isPublicProfile: true,
          isStudentResponses: true,
          isNotifications: true,
          isNotificationsOrders: true,
          isNotificationsResponse: true,
          isNotificationsPromo: true,
          isNotificationsSms: true,
          isNotificationsEmail: true,
          isNotificationsTelegram: true,
          isNotificationsMobilePush: true,
          isNotificationsWebPush: true,
          isNotificationsVk: true,
          badges: true,
          lastOnline: true,
          reviews: {
            include: {
              comments: true,
              student: {
                select: {
                  name: true,
                  avatarUrl: true,
                },
              },
              order: {
                select: {
                  id: true,
                  goal: true,
                  subject: true,
                },
              },
            },
          },
          userRating: true,
          reviewsCount: true,
          averageReviewScore: true,
          // –ò—Å–∫–ª—é—á–∞–µ–º: phone, email, telegram, skype, response, chats
        },
      });

      if (!allTutors) {
        return res
          .status(404)
          .json({ error: "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞" });
      }

      res.json(allTutors);
    } catch (error) {
      console.error("Get All Tutors Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ ID (SECURE)
  getTutorById: async (req, res) => {
    const { id } = req.params;

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
        // include: {
        //   educations: true,
        //   subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        // },
        select: {
          id: true,
          userId: true,
          // user: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          avatarUrl: true,
          subject: true,
          subjectComments: true,
          region: true,
          tutorPlace: true,
          tutorAdress: true,
          tutorHomeLoc: true,
          tutorTrip: true,
          tutorTripCityData: true,
          tutorTripCity: true,
          tutorTripArea: true,
          profileInfo: true,
          experience: true,
          educations: true,
          documents: true,
          isGroup: true,
          status: true,
          subjectPrices: true,
          isPublicProfile: true,
          isStudentResponses: true,
          isNotifications: true,
          isNotificationsOrders: true,
          isNotificationsResponse: true,
          isNotificationsPromo: true,
          isNotificationsSms: true,
          isNotificationsEmail: true,
          isNotificationsTelegram: true,
          isNotificationsMobilePush: true,
          isNotificationsWebPush: true,
          isNotificationsVk: true,
          badges: true,
          lastOnline: true,
          reviews: {
            include: {
              comments: true,
              student: {
                select: {
                  name: true,
                  avatarUrl: true,
                },
              },
              order: {
                select: {
                  id: true,
                  goal: true,
                  subject: true,
                },
              },
            },
          },
          userRating: true,
          reviewsCount: true,
          averageReviewScore: true,
          // –ò—Å–∫–ª—é—á–∞–µ–º: phone, email, telegram, skype, response, chats
        },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const selectedGoals = await prisma.tutorGoal.findMany({
        where: { tutorId: id },
        include: { goal: true },
      });

      const subjectIds = selectedGoals.map((tg) => tg.subjectId); // –∑–¥–µ—Å—å —É —Ç–µ–±—è id_p
      const subjects = await prisma.subject.findMany({
        where: { id_p: { in: subjectIds } },
      });

      // —Å–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      const subjectsMap = Object.fromEntries(subjects.map((s) => [s.id_p, s]));

      const goalsBySubject = selectedGoals.reduce((acc, tg) => {
        const subject = subjectsMap[tg.subjectId]; // –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Subject
        if (!subject) return acc;

        if (!acc[subject.id_p]) acc[subject.id_p] = { subject, goals: [] };
        acc[subject.id_p].goals.push(tg.goal);

        return acc;
      }, {});

      res.json({ tutor, goalsBySubject });
    } catch (error) {
      console.error("Get Tutor By Id Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ ID (SECURE)
  getTutorByIdPublic: async (req, res) => {
    const { id } = req.params;

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
        // include: {
        //   educations: true,
        //   subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        // },
        select: {
          id: true,
          userId: true,
          // user: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          avatarUrl: true,
          subject: true,
          subjectComments: true,
          region: true,
          tutorPlace: true,
          tutorAdress: true,
          tutorHomeLoc: true,
          tutorTrip: true,
          tutorTripCityData: true,
          tutorTripCity: true,
          tutorTripArea: true,
          profileInfo: true,
          experience: true,
          educations: true,
          documents: true,
          isGroup: true,
          status: true,
          subjectPrices: true,
          isPublicProfile: true,
          isStudentResponses: true,
          isNotifications: true,
          isNotificationsOrders: true,
          isNotificationsResponse: true,
          isNotificationsPromo: true,
          isNotificationsSms: true,
          isNotificationsEmail: true,
          isNotificationsTelegram: true,
          isNotificationsMobilePush: true,
          isNotificationsWebPush: true,
          isNotificationsVk: true,
          badges: true,
          lastOnline: true,
          reviews: {
            include: {
              comments: true,
              student: {
                select: {
                  name: true,
                  avatarUrl: true,
                },
              },
              order: {
                select: {
                  id: true,
                  goal: true,
                  subject: true,
                },
              },
            },
          },
          userRating: true,
          reviewsCount: true,
          averageReviewScore: true,
          // –ò—Å–∫–ª—é—á–∞–µ–º: phone, email, telegram, skype, response, chats
        },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const selectedGoals = await prisma.tutorGoal.findMany({
        where: { tutorId: id },
        include: { goal: true },
      });

      const subjectIds = selectedGoals.map((tg) => tg.subjectId); // –∑–¥–µ—Å—å —É —Ç–µ–±—è id_p
      const subjects = await prisma.subject.findMany({
        where: { id_p: { in: subjectIds } },
      });

      // —Å–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      const subjectsMap = Object.fromEntries(subjects.map((s) => [s.id_p, s]));

      const goalsBySubject = selectedGoals.reduce((acc, tg) => {
        const subject = subjectsMap[tg.subjectId]; // –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Subject
        if (!subject) return acc;

        if (!acc[subject.id_p]) acc[subject.id_p] = { subject, goals: [] };
        acc[subject.id_p].goals.push(tg.goal);

        return acc;
      }, {});

      res.json({ tutor, goalsBySubject });
    } catch (error) {
      console.error("Get Tutor By Id Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ ID
  getTutorPhoneById: async (req, res) => {
    const { id } = req.params;

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
        select: { phone: true }, // –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      res.json({ phone: tutor.phone });
    } catch (error) {
      console.error("Get Tutor Phone By Id Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
  currentTutor: async (req, res) => {
    try {
      const tutor = await prisma.tutor.findUnique({
        where: { userId: req.user.userID },
        include: {
          educations: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
          reviews: {
            include: {
              comments: true,
              student: {
                select: {
                  name: true,
                  avatarUrl: true,
                },
              },
              order: {
                select: {
                  id: true,
                  goal: true,
                  subject: true,
                },
              },
            },
          },
        },
      });

      if (!tutor) {
        return res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞" });
      }

      res.json(tutor);
    } catch (error) {
      console.error("Current Tutor Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
  updateTutor: async (req, res) => {
    const { id } = req.params;
    const {
      name,
      email,
      isVerifedEmail,
      telegram,
      skype,
      subject, // –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      subjectComments,
      region,
      tutorPlace,
      tutorAdress,
      tutorTrip,
      tutorTripCityData,
      tutorTripCity,
      tutorTripArea,
      profileInfo,
      experience,
      badges,
      isGroup,
      status,
      isPublicProfile,
      isStudentResponses,
      isNotifications,
      isNotificationsOrders,
      isNotificationsResponse,
      isNotificationsPromo,
      isNotificationsSms,
      isNotificationsEmail,
      isNotificationsTelegram,
      isNotificationsMobilePush,
      isNotificationsWebPush,
      isNotificationsVk,
      lastOnline,
    } = req.body;

    let avatarUrl;
    if (req.file) {
      avatarUrl = req.file.filename;
    }

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
        include: {
          subjectPrices: true,
          educations: true,
        }, // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã
      });

      if (!tutor) {
        return res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞" });
      }

      if (tutor.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      // –ù–∞—Ö–æ–¥–∏–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
      const oldSubjects = tutor.subject || [];
      const newSubjects = subject || [];
      const removedSubjects = oldSubjects.filter(
        (subj) => !newSubjects.includes(subj)
      );

      // –£–¥–∞–ª—è–µ–º —Ü–µ–Ω—ã, –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω (–ù–û –¢–û–õ–¨–ö–û –ï–°–õ–ò subject –ü–†–ò–®–ï–õ –í –ó–ê–ü–†–û–°–ï)
      if (subject !== undefined && removedSubjects.length > 0) {
        await prisma.tutorSubjectPrice.deleteMany({
          where: {
            tutorId: id,
            subjectId: { in: removedSubjects },
          },
        });

        // –£–¥–∞–ª—è–µ–º —Ü–µ–ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ —É–¥–∞–ª—ë–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
        await prisma.tutorGoal.deleteMany({
          where: {
            tutorId: id,
            subjectId: { in: removedSubjects },
          },
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      let updatedComments = tutor.subjectComments;

      if (subject !== undefined) {
        // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —É–¥–∞–ª—ë–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
        updatedComments = updatedComments.filter(
          (comment) => !removedSubjects.includes(comment.subjectId)
        );
      }

      // üî• –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º `subjectComments`
      if (subjectComments !== undefined) {
        const newSubjectIds = subjectComments.map((c) => c.subjectId);
        updatedComments = updatedComments.filter((comment) =>
          newSubjectIds.includes(comment.subjectId)
        );
      }

      // –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
      if (subjectComments !== undefined) {
        for (const newComment of subjectComments) {
          const existingIndex = updatedComments.findIndex(
            (c) => c.subjectId === newComment.subjectId
          );
          if (existingIndex !== -1) {
            updatedComments[existingIndex] = newComment; // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
          } else {
            updatedComments.push(newComment); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
          }
        }
      }

      // üìå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á—ë—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ–ª–∞–≥–æ–≤
      const autoHasSubjectPrices =
        tutor.subjectPrices && tutor.subjectPrices.length > 0;
      const autoHasPriceComments =
        Array.isArray(updatedComments) &&
        updatedComments.some((c) => c.comment && c.comment.trim().length > 0);
      const profileText = profileInfo || tutor.profileInfo || "";
      const autoHasProfileInfo = profileText.replace(/\s/g, "").length >= 300;
      const autoHasEducation = tutor.educations && tutor.educations.length > 0;
      const autoHasEducationPhotos =
        tutor.educations &&
        tutor.educations.some(
          (edu) =>
            Array.isArray(edu.educationDiplomUrl) &&
            edu.educationDiplomUrl.length > 0
        );

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–Ω–ª–∞–π–Ω–∞, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
      const currentTime = new Date();
      const lastOnlineTime = lastOnline ? new Date(lastOnline) : currentTime;

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
      const updatedTutor = await prisma.tutor.update({
        where: { id },
        data: {
          name: name || undefined,
          email: email || undefined,
          isVerifedEmail:
            isVerifedEmail !== undefined
              ? isVerifedEmail
              : tutor.isVerifedEmail,
          telegram: telegram || undefined,
          skype: skype || undefined,
          avatarUrl: avatarUrl ? `/uploads/${avatarUrl}` : tutor.avatarUrl,
          subject: subject || undefined, // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
          region: region || undefined,
          tutorPlace: tutorPlace || undefined,
          tutorAdress: tutorAdress || undefined,
          tutorTrip: tutorTrip || undefined,
          tutorTripCityData: tutorTripCityData || undefined,
          tutorTripCity: tutorTripCity || undefined,
          tutorTripArea: tutorTripArea || undefined,
          profileInfo: profileInfo || undefined,
          experience: experience || undefined,
          badges: badges !== undefined ? badges : tutor.badges,
          isGroup: isGroup !== undefined ? isGroup : tutor.isGroup,
          isPublicProfile:
            isPublicProfile !== undefined
              ? isPublicProfile
              : tutor.isPublicProfile,
          isStudentResponses:
            isStudentResponses !== undefined
              ? isStudentResponses
              : tutor.isStudentResponses,
          isNotifications:
            isNotifications !== undefined
              ? isNotifications
              : tutor.isNotifications,
          isNotificationsOrders:
            isNotificationsOrders !== undefined
              ? isNotificationsOrders
              : tutor.isNotificationsOrders,
          isNotificationsResponse:
            isNotificationsResponse !== undefined
              ? isNotificationsResponse
              : tutor.isNotificationsResponse,
          isNotificationsPromo:
            isNotificationsPromo !== undefined
              ? isNotificationsPromo
              : tutor.isNotificationsPromo,
          isNotificationsSms:
            isNotificationsSms !== undefined
              ? isNotificationsSms
              : tutor.isNotificationsSms,
          isNotificationsEmail:
            isNotificationsEmail !== undefined
              ? isNotificationsEmail
              : tutor.isNotificationsEmail,
          isNotificationsTelegram:
            isNotificationsTelegram !== undefined
              ? isNotificationsTelegram
              : tutor.isNotificationsTelegram,
          isNotificationsVk:
            isNotificationsVk !== undefined
              ? isNotificationsVk
              : tutor.isNotificationsVk,
          isNotificationsMobilePush:
            isNotificationsMobilePush !== undefined
              ? isNotificationsMobilePush
              : tutor.isNotificationsMobilePush,
          isNotificationsWebPush:
            isNotificationsWebPush !== undefined
              ? isNotificationsWebPush
              : tutor.isNotificationsWebPush,

          hasSubjectPrices: autoHasSubjectPrices,
          hasPriceComments: autoHasPriceComments,
          hasProfileInfo: autoHasProfileInfo,
          hasEducation: autoHasEducation,
          hasEducationPhotos: autoHasEducationPhotos,

          status: status || undefined,
          lastOnline: lastOnlineTime, // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–æ–Ω–ª–∞–π–Ω"
          ...(subject !== undefined || subjectComments !== undefined
            ? {
                subjectComments: JSON.parse(
                  JSON.stringify([...updatedComments])
                ),
              }
            : {}), // –û–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        },
        include: { subjectPrices: true },
      });

      // if (phone !== undefined) {
      //   const student = await prisma.student.findUnique({
      //     where: { userId: userID },
      //   });

      //   if (student) {
      //     await prisma.student.update({
      //       where: { userId: userID },
      //       data: {
      //         phone: phone || undefined,
      //       },
      //     });
      //   }
      // }

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
      const tutorNew = await prisma.tutor.findUnique({
        where: { id },
        include: {
          educations: true,
          subjectPrices: true, // –ü–æ–¥–≥—Ä—É–∑–∏—Ç —Ü–µ–Ω—ã —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        },
      });

      res.json(tutorNew);
    } catch (error) {
      console.error("Update Tutor Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
  updateTutorAvatar: async (req, res) => {
    const { id } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if (!req.file) {
      return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω" });
    }

    const avatarUrl = req.file.filename; // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (tutor.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
      const updatedTutor = await prisma.tutor.update({
        where: { id },
        data: {
          avatarUrl: `/uploads/${avatarUrl}`, // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        },
      });

      res.json(updatedTutor);
    } catch (error) {
      console.error("Update Tutor Avatar Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
  deleteTutorAvatar: async (req, res) => {
    try {
      const { id } = req.params;

      // –ù–∞–π—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ message: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (tutor.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä
      if (!tutor.avatarUrl) {
        return res
          .status(400)
          .json({ message: "–£ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è" });
      }

      // –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
      const avatarPath = path.resolve(
        "uploads",
        tutor.avatarUrl.replace(/^\/uploads\//, "")
      ); // –£–±–∏—Ä–∞–µ–º /uploads –∏–∑ –ø—É—Ç–∏
      if (fs.existsSync(avatarPath)) {
        fs.unlinkSync(avatarPath); // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
      const updatedTutor = await prisma.tutor.update({
        where: { id },
        data: {
          avatarUrl: null, // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        },
      });

      res.json(updatedTutor);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞" });
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
  deleteTutor: async (req, res) => {
    const { id } = req.params;

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞" });
      }

      if (tutor.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      // –°–î–ï–õ–ê–¢–¨ –£–î–ê–õ–ï–ù–ò–ï –û–¢–ö–õ–ò–ö–û–í!!!
      //   await prisma.response.deleteMany({
      //     where: {
      //       studentId: id,
      //     },
      //   });

      await prisma.tutor.delete({
        where: { id },
      });

      res.send("–†–µ–ø–µ—Ç–∏—Ç–æ—Ä —É–¥–∞–ª–µ–Ω");
    } catch (error) {
      console.error("Delete Tutor Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
  deleteRequest: async (req, res) => {
    const { id } = req.params;
    const { answer } = req.body; // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (tutor.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
      const existingRequest = await prisma.deletedRequest.findUnique({
        where: {
          userId_role: {
            userId: tutor.userId,
            role: "tutor",
          },
        },
      });

      if (existingRequest) {
        return res
          .status(409)
          .json({ message: "–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π
      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + 30);

      const deleteRequest = await prisma.deletedRequest.create({
        data: {
          userId: tutor.userId,
          role: "tutor", // –¢–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å
          answer, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è
          requestedAt: new Date(),
          expiresAt,
        },
      });

      res.status(201).json(deleteRequest);
    } catch (error) {
      console.error("Delete Request Tutor Error", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É + –ø–æ–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
  getTutorGoalsBySubject: async (req, res) => {
    const { subjectId, tutorId } = req.params;

    if (!tutorId) {
      return res.status(400).json({ error: "tutorId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    try {
      const subject = await prisma.subject.findFirst({
        where: { id_p: subjectId },
        select: { goalCategoryId: true },
      });
      // –ò–°–ü–†–ê–í–ò–¢–¨ –ù–ê –í–ê–†–ò–ê–ù–¢ –ù–ò–ñ–ï –ö–û–ì–î–ê –ü–ï–†–ï–î–ï–õ–ê–ï–ú –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–†–ï–î–ú–ï–¢–û–í –ü–û –ò–• ID –í MONGOBD
      // const subject = await prisma.subject.findUnique({
      //   where: { id: subjectId },
      //   select: { goalCategoryId: true },
      // });

      if (!subject) return res.status(404).json({ error: "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });

      const goalLinks = await prisma.goalToCategory.findMany({
        where: { categoryId: subject.goalCategoryId },
        include: {
          goal: {
            include: {
              tutorGoals: {
                where: { tutorId, subjectId }, // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ tutorId + subjectId
              },
            },
          },
        },
      });

      const goals = goalLinks.map((link) => ({
        ...link.goal,
        selected: link.goal.tutorGoals.length > 0, // –ø–æ–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏
      }));

      res.status(200).json(goals);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
  getTutorSelectedGoalsGrouped: async (req, res) => {
    const { tutorId } = req.params;

    try {
      const selectedGoals = await prisma.tutorGoal.findMany({
        where: { tutorId },
        include: { goal: true },
      });

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ subjectId
      const goalsBySubject = selectedGoals.reduce((acc, tg) => {
        if (!acc[tg.subjectId]) acc[tg.subjectId] = [];
        acc[tg.subjectId].push({
          id: tg.goal.id,
          title: tg.goal.title,
        });
        return acc;
      }, {});

      res.status(200).json(goalsBySubject);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —Å —Ü–µ–ª—è–º–∏
  getTutorSubjectsWithGoals: async (req, res) => {
    const { tutorId } = req.params;

    if (!tutorId) return res.status(400).json({ error: "tutorId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });

    try {
      // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
      const tutor = await prisma.tutor.findUnique({
        where: { id: tutorId },
        select: { subject: true }, // –º–∞—Å—Å–∏–≤ id_p –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ë–µ—Ä—ë–º –ø—Ä–µ–¥–º–µ—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ tutor.subject
      const subjects = await prisma.subject.findMany({
        where: { id_p: { in: tutor.subject } },
        select: {
          id_p: true,
          title: true,
          goalCategoryId: true,
        },
      });

      const categoryIds = subjects.map((s) => s.goalCategoryId);

      // –ë–µ—Ä—ë–º –≤—Å–µ —Ü–µ–ª–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–¥–Ω–æ–π –ø–∞—á–∫–æ–π
      const goalsInCategories = await prisma.goalToCategory.findMany({
        where: { categoryId: { in: categoryIds } },
        include: { goal: true },
      });

      // –ë–µ—Ä—ë–º –≤—Å–µ —Ü–µ–ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
      const tutorGoals = await prisma.tutorGoal.findMany({
        where: { tutorId },
      });

      // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ü–µ–ª–∏ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
      const result = subjects.map((subject) => {
        const goalsForSubject = goalsInCategories.filter(
          (link) => link.categoryId === subject.goalCategoryId
        );

        const goalsWithSelected = goalsForSubject.map((link) => {
          const selected = tutorGoals.some(
            (tg) => tg.goalId === link.goal.id && tg.subjectId === subject.id_p
          );
          return { id: link.goal.id, title: link.goal.title, selected };
        });

        return {
          subjectId: subject.id_p,
          subjectTitle: subject.title,
          goals: goalsWithSelected,
          hasNoSelectedGoals: goalsWithSelected.every((g) => !g.selected),
        };
      });

      res.status(200).json(result);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ü–µ–ª—è–º–∏:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–π –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É + –ø–æ–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
  updateTutorGoalsBySubject: async (req, res) => {
    const { tutorId, subjectId } = req.params;
    const { goalIds } = req.body; // –º–∞—Å—Å–∏–≤ ID —Ü–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–ª —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä

    if (!Array.isArray(goalIds)) {
      return res
        .status(400)
        .json({ error: "goalIds –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º" });
    }

    try {
      // 1Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ü–µ–ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
      await prisma.tutorGoal.deleteMany({
        where: {
          tutorId,
          subjectId,
        },
      });

      // 2Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏
      const newGoals = goalIds.map((goalId) => ({
        tutorId,
        subjectId,
        goalId,
      }));

      if (newGoals.length > 0) {
        await prisma.tutorGoal.createMany({ data: newGoals });
      }

      res.status(200).json({ message: "–¶–µ–ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã" });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–µ–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  addEducation: async (req, res) => {
    const {
      educationInfo,
      educationStartYear,
      educationEndYear,
      isShowDiplom,
    } = req.body;
    const { id } = req.params;

    if (!educationInfo || !educationStartYear) {
      return res
        .status(400)
        .json({ error: "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" });
    }

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (tutor.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      let diplomaUrls = [];

      if (req.files && req.files.length > 0) {
        diplomaUrls = req.files.map(
          (file) => `/uploads/diplomas/${file.filename}`
        );
      }

      const education = await prisma.tutorEducation.create({
        data: {
          tutorId: id,
          educationInfo,
          educationStartYear: educationStartYear,
          educationEndYear: educationEndYear ? educationEndYear : null,
          educationDiplomUrl: diplomaUrls, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Å–∏–≤ URL
          isShowDiplom: isShowDiplom === "true",
        },
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è)
      const educations = await prisma.tutorEducation.findMany({
        where: { tutorId: id },
      });

      const hasEducation = educations.length > 0;
      const hasEducationPhotos = educations.some(
        (edu) =>
          Array.isArray(edu.educationDiplomUrl) &&
          edu.educationDiplomUrl.length > 0
      );

      const updatedTutor = await prisma.tutor.update({
        where: { id },
        data: {
          hasEducation,
          hasEducationPhotos,
        },
        include: {
          educations: true,
          subjectPrices: true,
        },
      });

      res.json(updatedTutor);
    } catch (error) {
      console.error("Error adding education:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  updateEducation: async (req, res) => {
    const {
      educationInfo,
      educationStartYear,
      educationEndYear,
      isShowDiplom,
    } = req.body;
    const { id, educationId } = req.params; // id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏ id –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è

    if (!educationInfo || !educationStartYear) {
      return res
        .status(400)
        .json({ error: "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" });
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (tutor.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      let diplomaUrls = [];

      if (req.files && req.files.length > 0) {
        diplomaUrls = req.files.map(
          (file) => `/uploads/diplomas/${file.filename}`
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
      const education = await prisma.tutorEducation.findUnique({
        where: { id: educationId },
      });

      if (!education) {
        return res.status(404).json({ error: "–ú–µ—Å—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      const updatedEducation = await prisma.tutorEducation.update({
        where: { id: educationId },
        data: {
          educationInfo,
          educationStartYear,
          educationEndYear,
          educationDiplomUrl:
            diplomaUrls.length > 0
              ? [...education.educationDiplomUrl, ...diplomaUrls] // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∏–ø–ª–æ–º—ã –∫ —Å—Ç–∞—Ä—ã–º
              : education.educationDiplomUrl, // –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö –¥–∏–ø–ª–æ–º–æ–≤ –Ω–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
          isShowDiplom: isShowDiplom === "true", // –ï—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        },
      });

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      const educations = await prisma.tutorEducation.findMany({
        where: { tutorId: id },
      });

      // –ü–µ—Ä–µ—Å—á—ë—Ç autoHasEducationPhotos
      const autoHasEducationPhotos = educations.some(
        (edu) =>
          Array.isArray(edu.educationDiplomUrl) &&
          edu.educationDiplomUrl.length > 0
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —Å –º–µ—Å—Ç–∞–º–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      const updatedTutor = await prisma.tutor.update({
        where: { id },
        data: {
          hasEducationPhotos: autoHasEducationPhotos,
        },
        include: {
          educations: true,
          subjectPrices: true,
        },
      });

      res.json(updatedTutor);
    } catch (error) {
      console.error("Error updating education:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  deleteEducation: async (req, res) => {
    const { id, educationId } = req.params; // id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏ id –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (tutor.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
      const education = await prisma.tutorEducation.findUnique({
        where: { id: educationId },
      });

      if (!education) {
        return res.status(404).json({ error: "–ú–µ—Å—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
      }

      // –ï—Å–ª–∏ —É –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –µ—Å—Ç—å —Ñ–∞–π–ª—ã –¥–∏–ø–ª–æ–º–æ–≤, —É–¥–∞–ª—è–µ–º –∏—Ö
      if (
        education.educationDiplomUrl &&
        Array.isArray(education.educationDiplomUrl)
      ) {
        education.educationDiplomUrl.forEach((diplomUrl) => {
          const diplomPath = path.resolve(
            "uploads/diplomas", // –ü–∞–ø–∫–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∏–ø–ª–æ–º—ã
            diplomUrl.replace(/^\/uploads\/diplomas\//, "") // –£–±–∏—Ä–∞–µ–º /uploads/diplomas –∏–∑ –ø—É—Ç–∏
          );

          if (fs.existsSync(diplomPath)) {
            try {
              fs.unlinkSync(diplomPath); // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–∏–ø–ª–æ–º–∞
            } catch (err) {
              console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: ${diplomPath}`, err);
            }
          }
        });
      }

      // –£–¥–∞–ª—è–µ–º –º–µ—Å—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      await prisma.tutorEducation.delete({
        where: { id: educationId },
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è)
      const educations = await prisma.tutorEducation.findMany({
        where: { tutorId: id },
      });

      const hasEducation = educations.length > 0;
      const hasEducationPhotos = educations.some(
        (edu) =>
          Array.isArray(edu.educationDiplomUrl) &&
          edu.educationDiplomUrl.length > 0
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —Å –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
      const updatedTutor = await prisma.tutor.update({
        where: { id },
        data: { hasEducation, hasEducationPhotos },
        include: {
          educations: true,
          subjectPrices: true,
        },
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
      res.json(updatedTutor);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  deleteDiploma: async (req, res) => {
    const { id, educationId } = req.params;
    const { fileName } = req.body; // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (tutor.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      const education = await prisma.tutorEducation.findUnique({
        where: { id: educationId },
      });

      if (!education) {
        return res.status(404).json({ error: "–ú–µ—Å—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
      }

      // –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
      const filePath = path.resolve("uploads/diplomas", fileName); // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath); // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–∏–ø–ª–æ–º–∞—Ö
      const updatedEducation = await prisma.tutorEducation.update({
        where: { id: educationId },
        data: {
          educationDiplomUrl: {
            // –£–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞
            set: education.educationDiplomUrl.filter(
              (url) => !url.includes(fileName)
            ),
          },
        },
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —Å –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
      const updatedTutor = await prisma.tutor.findUnique({
        where: { id },
        include: {
          educations: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        },
      });

      return res.json(updatedTutor);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ:", error);
      res.status(500).json({ error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
  addSubjectPrice: async (req, res) => {
    const { tutorId, subjectId, format, price, duration } = req.body;

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
      const tutor = await prisma.tutor.findUnique({
        where: { id: tutorId },
        include: {
          educations: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        }, // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã
      });

      if (tutor.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }
      await prisma.tutorSubjectPrice.create({
        data: {
          tutorId,
          subjectId,
          format,
          price: Number(price),
          duration,
        },
      });

      res.status(201).json(tutor);
    } catch (error) {
      console.error("Add Subject Price Error:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
  updateSubjectPrice: async (req, res) => {
    const { id } = req.params; // –ë–µ—Ä–µ–º ID —Ü–µ–Ω—ã –∏–∑ URL
    const { price, duration } = req.body;

    try {
      const existingPrice = await prisma.tutorSubjectPrice.findUnique({
        where: { id },
      });

      if (!existingPrice) {
        return res.status(404).json({ error: "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
      const tutorCheck = await prisma.tutor.findUnique({
        where: { id: existingPrice.tutorId },
      });

      if (!tutorCheck) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ userId
      if (tutorCheck.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
      await prisma.tutorSubjectPrice.update({
        where: { id },
        data: {
          price: Number(price),
          duration,
        },
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —É–∂–µ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
      const tutor = await prisma.tutor.findUnique({
        where: { id: existingPrice.tutorId },
        include: {
          educations: true,
          subjectPrices: true,
        },
      });

      res.json(tutor);
    } catch (error) {
      console.error("Update Subject Price Error:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã" });
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±–µ–∑ –ø–æ–ª–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  incompleteSubjectPrices: async (req, res) => {
    try {
      const tutorId = req.params.tutorId;

      if (!tutorId) {
        return res.status(400).json({ error: "ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
      }

      const tutor = await prisma.tutor.findUnique({
        where: { id: tutorId },
        select: { subjectPrices: true, subject: true },
      });

      if (!tutor) {
        return res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞" });
      }

      const subjectsWithoutFullPrices = tutor.subject
        .map((subjId) => {
          const pricesForSubject = tutor.subjectPrices.filter(
            (p) => p.subjectId === subjId
          );
          return pricesForSubject.length === 0 ? subjId : null;
        })
        .filter(Boolean);

      res.json({
        hasIncompletePrices: subjectsWithoutFullPrices.length > 0,
        subjectsWithoutFullPrices,
      });
    } catch (error) {
      console.error("Incomplete Prices Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∏ —Ü–µ–ª–∏ (–î–õ–Ø –ó–ê–ö–ê–ó–û–í) (SECURE)
  // getTutorsBySubjectAndGoal: async (req, res) => {
  //   const { subjectId, goalId } = req.params;

  //   if (!subjectId || !goalId) {
  //     return res.status(400).json({ error: "–ù—É–∂–Ω—ã subjectId –∏ goalId" });
  //   }

  //   try {
  //     // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏,
  //     // —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏ —Ü–µ–ª—å
  //     const tutors = await prisma.tutor.findMany({
  //       where: {
  //         status: "Active",
  //         isStudentResponses: true,
  //         subject: { has: subjectId }, // –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
  //         tutorGoals: {
  //           some: {
  //             subjectId: subjectId,
  //             goalId: goalId,
  //           },
  //         },
  //       },
  //       select: {
  //         id: true,
  //         userId: true,
  //         createdAt: true,
  //         updatedAt: true,
  //         name: true,
  //         avatarUrl: true,
  //         subject: true,
  //         subjectComments: true,
  //         region: true,
  //         tutorPlace: true,
  //         tutorAdress: true,
  //         tutorHomeLoc: true,
  //         tutorTrip: true,
  //         tutorTripCityData: true,
  //         tutorTripCity: true,
  //         tutorTripArea: true,
  //         profileInfo: true,
  //         experience: true,
  //         educations: true,
  //         documents: true,
  //         isGroup: true,
  //         status: true,
  //         subjectPrices: true,
  //         isPublicProfile: true,
  //         isStudentResponses: true,
  //         isNotifications: true,
  //         isNotificationsOrders: true,
  //         isNotificationsResponse: true,
  //         isNotificationsPromo: true,
  //         isNotificationsSms: true,
  //         isNotificationsEmail: true,
  //         isNotificationsTelegram: true,
  //         isNotificationsMobilePush: true,
  //         isNotificationsWebPush: true,
  //         isNotificationsVk: true,
  //         badges: true,
  //         lastOnline: true,
  //         reviews: {
  //           include: {
  //             comments: true,
  //             student: {
  //               select: {
  //                 name: true,
  //                 avatarUrl: true,
  //               },
  //             },
  //             order: {
  //               select: {
  //                 id: true,
  //                 goal: true,
  //                 subject: true,
  //               },
  //             },
  //           },
  //         },
  //         userRating: true,
  //         reviewsCount: true,
  //         averageReviewScore: true,
  //         totalRating: true,
  //         tutorGoals: {
  //           where: { subjectId },
  //           include: { goal: true },
  //         },
  //       },
  //       orderBy: { createdAt: "desc" },
  //     });

  //     if (!tutors.length) {
  //       return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
  //     }

  //     // üí° –ß—Ç–æ–±—ã —É–¥–æ–±–Ω–µ–µ –±—ã–ª–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ "selectedGoal"
  //     const tutorsFormatted = tutors.map((t) => ({
  //       ...t,
  //       tutorGoals: t.tutorGoals.map((g) => ({
  //         ...g,
  //         selected: g.goalId === goalId, // —Ü–µ–ª—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª –∑–∞–∫–∞–∑
  //       })),
  //     }));

  //     res.json(tutorsFormatted);
  //   } catch (error) {
  //     console.error("–û—à–∏–±–∫–∞ getTutorsBySubjectAndGoal:", error);
  //     res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  //   }
  // },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ orderId (SECURE)
  getTutorsForOrderById: async (req, res) => {
    const { orderId } = req.params;
    const { page = 1, limit = 20 } = req.query; // –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∏–∑ query

    if (!orderId) {
      return res.status(400).json({ error: "–ù—É–∂–µ–Ω orderId" });
    }

    try {
      // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
      const order = await prisma.order.findUnique({
        where: { id: orderId },
        select: {
          subject: true,
          goalId: true,
          studentPlace: true,
          region: true,
          studentTrip: true,
          studentHomeLoc: true,
          tutorType: true,
        },
      });

      if (!order) {
        return res.status(404).json({ error: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
      const {
        tutors,
        totalTutors,
        totalPages,
        currentPage,
        limit: realLimit,
      } = await findTutorsForOrdersAllDataTutor(
        order,
        Number(page),
        Number(limit)
      );

      if (!tutors.length) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
      }

      res.json({
        tutors,
        pagination: {
          page: currentPage,
          limit: realLimit,
          total: totalTutors,
          totalPages,
        },
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ getTutorsForOrderById:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },
};

module.exports = TutorController;
