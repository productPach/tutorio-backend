const { prisma } = require("../prisma/prisma-client");

const ReviewController = {
  // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏–ª–∏ —É—á–µ–Ω–∏–∫–∞
  createReviewByUser: async (req, res) => {
    const { orderId, tutorId, studentId, authorRole, message, rating } =
      req.body;
    const userId = req.user.userID;

    if (
      !orderId ||
      !tutorId ||
      !studentId ||
      !authorRole ||
      typeof rating !== "number"
    ) {
      return res.status(400).json({ error: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è" });
    }

    if (rating < 1 || rating > 5) {
      return res.status(400).json({ error: "–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5" });
    }

    try {
      const order = await prisma.order.findUnique({ where: { id: orderId } });
      if (!order) return res.status(404).json({ error: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });

      if (authorRole === "student") {
        const student = await prisma.student.findUnique({
          where: { id: studentId },
          include: { user: true },
        });

        if (
          !student ||
          student.userId !== userId ||
          student.id !== order.studentId
        ) {
          return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞" });
        }
      }

      if (authorRole === "tutor") {
        const tutor = await prisma.tutor.findUnique({
          where: { id: tutorId },
          include: { user: true },
        });

        if (!tutor || tutor.userId !== userId) {
          return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞" });
        }

        // üí° –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ
        // (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—ã–ª –æ—Ç–∫–ª–∏–∫ –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç)
      }

      const review = await prisma.review.create({
        data: {
          orderId,
          tutorId,
          studentId,
          message: message || undefined,
          rating,
          authorRole,
          status: "Pending",
        },
      });

      res.json(review);
    } catch (e) {
      console.error("createReviewByUser error:", e);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∑—ã–≤—É –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏–ª–∏ —É—á–µ–Ω–∏–∫–∞
  createCommentByUser: async (req, res) => {
    const { reviewId, text } = req.body;
    const userId = req.user.userID;

    if (!reviewId || !text) {
      return res.status(400).json({ error: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è" });
    }

    try {
      const review = await prisma.review.findUnique({
        where: { id: reviewId },
      });
      if (!review) return res.status(404).json({ error: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" });

      // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏ —É—á–µ–Ω–∏–∫–∞ –ø–æ userId
      const tutor = await prisma.tutor.findUnique({ where: { userId } });
      const student = await prisma.student.findUnique({ where: { userId } });

      if (!tutor && !student) {
        return res.status(403).json({
          error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º, –Ω–∏ —É—á–µ–Ω–∏–∫–æ–º",
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Ç–∑—ã–≤—É
      if (review.tutorId) {
        if (!tutor || review.tutorId !== tutor.id) {
          return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç–∑—ã–≤—É" });
        }
      }
      if (review.studentId) {
        if (!student || review.studentId !== student.id) {
          return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç–∑—ã–≤—É" });
        }
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –∏ id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      let senderId, senderRole;
      if (tutor && review.tutorId === tutor.id) {
        senderId = tutor.id;
        senderRole = "tutor";
      } else if (student && review.studentId === student.id) {
        senderId = student.id;
        senderRole = "student";
      } else {
        return res
          .status(403)
          .json({ error: "–ù–µ—Ç –ø—Ä–∞–≤ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" });
      }

      const comment = await prisma.comment.create({
        data: {
          reviewId,
          text,
          senderId,
          senderRole,
        },
      });

      res.json(comment);
    } catch (e) {
      console.error("createCommentByUser error:", e);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏–ª–∏ —É—á–µ–Ω–∏–∫–∞
  updateReviewByUser: async (req, res) => {
    const { id } = req.params; // id –æ—Ç–∑—ã–≤–∞
    const { message, rating } = req.body;
    const userId = req.user.userID;

    if (
      rating !== undefined &&
      (typeof rating !== "number" || rating < 1 || rating > 5)
    ) {
      return res.status(400).json({ error: "–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5" });
    }

    try {
      const review = await prisma.review.findUnique({
        where: { id },
        include: {
          student: { select: { userId: true } },
          tutor: { select: { userId: true } },
        },
      });

      if (!review) {
        return res.status(404).json({ error: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const isStudentAuthor =
        review.authorRole === "student" && review.student?.userId === userId;
      const isTutorAuthor =
        review.authorRole === "tutor" && review.tutor?.userId === userId;

      if (!isStudentAuthor && !isTutorAuthor) {
        return res
          .status(403)
          .json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —ç—Ç–æ–≥–æ –æ—Ç–∑—ã–≤–∞" });
      }

      const updatedReview = await prisma.review.update({
        where: { id },
        data: {
          ...(message !== undefined && { message }),
          ...(rating !== undefined && { rating }),
          updatedAt: new Date(),
        },
      });

      res.json(updatedReview);
    } catch (e) {
      console.error("updateReviewByUser error:", e);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ (–≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
  getReviewsByTutorId: async (req, res) => {
    const { tutorId } = req.params;

    if (!tutorId) {
      return res.status(400).json({ error: "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞" });
    }

    try {
      const reviews = await prisma.review.findMany({
        where: {
          tutorId,
          authorRole: "student",
          status: "Active",
        },
        orderBy: { createdAt: "desc" },
        include: {
          comments: {
            orderBy: { createdAt: "asc" },
          },
          student: {
            select: { id: true, name: true },
          },
          order: {
            select: { id: true, subject: true, goal: true },
          },
        },
      });

      res.json(reviews);
    } catch (e) {
      console.error("getReviewsByTutorId error:", e);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },
};

module.exports = ReviewController;
