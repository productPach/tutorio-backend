const { prisma } = require("../prisma/prisma-client");

const LocationController = {
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –æ–±–ª–∞—Å—Ç–∏
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
  createCity: async (req, res) => {
    const { title, area, shortTitle, districts, regionalCities } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!title || !area || !shortTitle) {
      return res.status(400).json({
        error: "–ü–æ–ª—è title, area –∏ shortTitle —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏",
      });
    }

    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
      const existingCity = await prisma.city.findUnique({
        where: { title },
      });

      if (existingCity) {
        return res.status(400).json({
          error: "–ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        });
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
      const newCity = await prisma.city.create({
        data: {
          title,
          area,
          shortTitle,
          districts: {
            create:
              districts?.map((district) => ({
                title: district.title,
                type: district.type,
                metros: {
                  create:
                    district.metros?.map((metro) => ({
                      title: metro.title,
                      color: metro.color || null,
                      lineName: metro.lineName || null,
                      lineNumber: metro.lineNumber || null,
                    })) || [],
                },
              })) || [],
          },
          regionalCities: {
            create:
              regionalCities?.map((regionalCity) => ({
                title: regionalCity.title,
              })) || [],
          },
        },
      });

      res.status(201).json(newCity);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
  getAllCity: async (req, res) => {
    try {
      const cities = await prisma.city.findMany({
        include: {
          districts: {
            include: {
              metros: true, // –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ
            },
          },
          regionalCities: true, // –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
        },
      });

      res.status(200).json(cities);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ ID
  getCityById: async (req, res) => {
    const { id } = req.params;

    if (!id) {
      return res
        .status(400)
        .json({ error: "ID –≥–æ—Ä–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    try {
      const city = await prisma.city.findUnique({
        where: { id },
        include: {
          districts: {
            include: {
              metros: true, // –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ
            },
          },
          regionalCities: true, // –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
        },
      });

      if (!city) {
        return res.status(404).json({ error: "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      res.status(200).json(city);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ ID:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ ID (—Ç–æ–ª—å–∫–æ title, area –∏ shortTitle)
  // updateCityById: async (req, res) => {
  //   const { id } = req.params;
  //   const { title, area, shortTitle } = req.body;

  //   if (!id) {
  //     return res
  //       .status(400)
  //       .json({ error: "ID –≥–æ—Ä–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
  //   }

  //   if (!title || !area || !shortTitle) {
  //     return res.status(400).json({
  //       error: "–ü–æ–ª—è title, area –∏ shortTitle —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏",
  //     });
  //   }

  //   try {
  //     // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
  //     const userId = req.user.userID;
  //     const isAdmin = await prisma.employee.findUnique({
  //       where: { userId },
  //     });

  //     if (!isAdmin) {
  //       return res
  //         .status(403)
  //         .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
  //     }
  //     // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
  //     const existingCity = await prisma.city.findUnique({ where: { id } });

  //     if (!existingCity) {
  //       return res.status(404).json({ error: "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
  //     }

  //     // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
  //     const updatedCity = await prisma.city.update({
  //       where: { id },
  //       data: {
  //         title,
  //         area,
  //         shortTitle,
  //       },
  //     });

  //     res.status(200).json({
  //       message: "–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
  //       city: updatedCity,
  //     });
  //   } catch (error) {
  //     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:", error);
  //     res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  //   }
  // },
  updateCityById: async (req, res) => {
    const { id } = req.params;
    const { title, area, shortTitle, districts, regionalCities } = req.body;

    if (!id) {
      return res
        .status(400)
        .json({ error: "ID –≥–æ—Ä–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    if (!title || !area || !shortTitle) {
      return res.status(400).json({
        error: "–ü–æ–ª—è title, area –∏ shortTitle —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏",
      });
    }

    try {
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({ where: { userId } });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }

      const existingCity = await prisma.city.findUnique({
        where: { id },
        include: {
          districts: { include: { metros: true } },
          regionalCities: true,
        },
      });

      if (!existingCity) {
        return res.status(404).json({ error: "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º –≥–æ—Ä–æ–¥
      const updatedCity = await prisma.city.update({
        where: { id },
        data: { title, area, shortTitle },
      });

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ districts
      if (districts?.length) {
        for (const district of districts) {
          if (district.id) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–π–æ–Ω
            await prisma.district.update({
              where: { id: district.id },
              data: {
                title: district.title,
                type: district.type,
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–æ
                metros: {
                  upsert:
                    district.metros?.map((metro) => ({
                      where: { id: metro.id || 0 }, // –µ—Å–ª–∏ –µ—Å—Ç—å id, –æ–±–Ω–æ–≤–ª—è–µ–º; –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º
                      update: {
                        title: metro.title,
                        color: metro.color || null,
                        lineName: metro.lineName || null,
                        lineNumber: metro.lineNumber || null,
                      },
                      create: {
                        title: metro.title,
                        color: metro.color || null,
                        lineName: metro.lineName || null,
                        lineNumber: metro.lineNumber || null,
                      },
                    })) || [],
                },
              },
            });
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–π–æ–Ω
            await prisma.district.create({
              data: {
                title: district.title,
                type: district.type,
                cityId: id,
                metros: {
                  create:
                    district.metros?.map((metro) => ({
                      title: metro.title,
                      color: metro.color || null,
                      lineName: metro.lineName || null,
                      lineNumber: metro.lineNumber || null,
                    })) || [],
                },
              },
            });
          }
        }
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ regionalCities
      if (regionalCities?.length) {
        for (const regCity of regionalCities) {
          if (regCity.id) {
            await prisma.regionalCity.update({
              where: { id: regCity.id },
              data: { title: regCity.title },
            });
          } else {
            await prisma.regionalCity.create({
              data: { title: regCity.title, cityId: id },
            });
          }
        }
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –≥–æ—Ä–æ–¥–∞
      const fullCity = await prisma.city.findUnique({
        where: { id },
        include: {
          districts: { include: { metros: true } },
          regionalCities: true,
        },
      });

      res.status(200).json({
        message: "–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        city: fullCity,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –≤ –≥–æ—Ä–æ–¥ –ø–æ ID
  createDistrict: async (req, res) => {
    const { cityId } = req.params;
    const { title, type, metros } = req.body;

    if (!title) {
      return res.status(400).json({
        error: "–ü–æ–ª–µ title —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º",
      });
    }

    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥
      const existingCity = await prisma.city.findUnique({
        where: { id: cityId },
      });

      if (!existingCity) {
        return res.status(404).json({
          error: "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–π–æ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–π–æ–Ω–æ–≤ –≥–æ—Ä–æ–¥–∞
      const updatedCity = await prisma.city.update({
        where: { id: cityId },
        data: {
          districts: {
            create: {
              title,
              type,
              metros: {
                create:
                  metros?.map((metro) => ({
                    title: metro.title,
                    color: metro.color || null,
                    lineName: metro.lineName || null,
                    lineNumber: metro.lineNumber || null,
                  })) || [],
              },
            },
          },
        },
        include: {
          districts: true,
        },
      });

      res.status(201).json({
        message: "–†–∞–π–æ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
        city: updatedCity,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–æ–≤ –≥–æ—Ä–æ–¥–∞ –ø–æ —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –æ–¥–Ω–æ–º—É —Ç–∏–ø—É –¥–ª—è –≤—Å–µ—Ö
  createDistrictsBulk: async (req, res) => {
    const { cityId } = req.params; // id –≥–æ—Ä–æ–¥–∞
    const { districts, type } = req.body; // districts: "–ê, –ë, –í", type: "Area" –∏–ª–∏ "District" –∏ —Ç.–¥.

    if (!cityId) {
      return res
        .status(400)
        .json({ error: "ID –≥–æ—Ä–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    if (!districts || typeof districts !== "string") {
      return res.status(400).json({
        error: "–ü–æ–ª–µ districts –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
      });
    }

    if (!type || typeof type !== "string") {
      return res.status(400).json({
        error: "–ü–æ–ª–µ type —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π",
      });
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏/–∞–¥–º–∏–Ω—ã
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({ where: { userId } });
      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥
      const city = await prisma.city.findUnique({ where: { id: cityId } });
      if (!city) {
        return res.status(404).json({ error: "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
      const districtsArray = districts
        .split(",")
        .map((d) => d.trim())
        .filter(Boolean);

      if (districtsArray.length === 0) {
        return res
          .status(400)
          .json({ error: "–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–π–æ–Ω" });
      }

      // –ü–æ–ª—É—á–∏–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–π–æ–Ω—ã –≥–æ—Ä–æ–¥–∞ (—á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏—Ç—å –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
      const existingDistricts = await prisma.district.findMany({
        where: { cityId },
        select: { id: true, title: true, type: true },
      });

      const existingTitlesLower = new Set(
        existingDistricts.map((d) => d.title.toLowerCase())
      );

      // –í—ã–±–∏—Ä–∞–µ–º, –∫–∞–∫–∏–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å)
      const toCreate = districtsArray.filter(
        (title) => !existingTitlesLower.has(title.toLowerCase())
      );

      const created = [];
      for (const title of toCreate) {
        const createdDistrict = await prisma.district.create({
          data: {
            title,
            type: type.trim(),
            cityId,
          },
        });
        created.push(createdDistrict);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç: —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏ –∏ —á—Ç–æ —É–∂–µ –±—ã–ª–æ
      const skipped = existingDistricts.filter((d) =>
        districtsArray.some((t) => t.toLowerCase() === d.title.toLowerCase())
      );

      if (created.length === 0) {
        return res.status(200).json({
          message:
            "–†–∞–π–æ–Ω—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã ‚Äî –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–∞–π–æ–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –≥–æ—Ä–æ–¥–µ",
          skipped,
        });
      }

      return res.status(201).json({
        message: "–†–∞–π–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
        created,
        skipped,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω–æ–≤:", error);
      return res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –ø–æ ID (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ)
  updateDistrictById: async (req, res) => {
    const { id } = req.params;
    const { title, type } = req.body;

    if (!id) {
      return res
        .status(400)
        .json({ error: "ID —Ä–∞–π–æ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    if (!title || !type) {
      return res
        .status(400)
        .json({ error: "–ü–æ–ª—è title –∏ type —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏" });
    }

    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞
      const existingDistrict = await prisma.district.findUnique({
        where: { id },
      });

      if (!existingDistrict) {
        return res.status(404).json({ error: "–†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞
      const updatedDistrict = await prisma.district.update({
        where: { id },
        data: {
          title,
          type,
        },
      });

      res.status(200).json({
        message: "–†–∞–π–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        district: updatedDistrict,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–æ –≤ —Ä–∞–π–æ–Ω –ø–æ ID —Ä–∞–π–æ–Ω–∞
  createMetro: async (req, res) => {
    const { districtId } = req.params;
    const { title, color, lineName, lineNumber } = req.body;

    if (!districtId) {
      return res
        .status(400)
        .json({ error: "ID —Ä–∞–π–æ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    if (!title || !color || !lineName || !lineNumber) {
      return res.status(400).json({
        error:
          "–ü–æ–ª—è title, color, lineName –∏ lineNumber —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏",
      });
    }

    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞
      const existingDistrict = await prisma.district.findUnique({
        where: { id: districtId },
      });

      if (!existingDistrict) {
        return res.status(404).json({ error: "–†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ—Ç—Ä–æ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–π–æ–Ω
      const newMetro = await prisma.metro.create({
        data: {
          title,
          color,
          lineName,
          lineNumber,
          districtId, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–æ –∫ —Ä–∞–π–æ–Ω—É
        },
      });

      res.status(201).json({
        message: "–ú–µ—Ç—Ä–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ",
        metro: newMetro,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–æ:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–æ –ø–æ ID
  updateMetroById: async (req, res) => {
    const { id } = req.params;
    const { title, color, lineName, lineNumber } = req.body;

    if (!id) {
      return res
        .status(400)
        .json({ error: "ID –º–µ—Ç—Ä–æ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    if (!title || !color || !lineName || !lineNumber) {
      return res.status(400).json({
        error:
          "–ü–æ–ª—è title, color, lineName –∏ lineNumber —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏",
      });
    }

    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–æ
      const existingMetro = await prisma.metro.findUnique({ where: { id } });

      if (!existingMetro) {
        return res.status(404).json({ error: "–ú–µ—Ç—Ä–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–æ
      const updatedMetro = await prisma.metro.update({
        where: { id },
        data: {
          title,
          color,
          lineName,
          lineNumber,
        },
      });

      res.status(200).json({
        message: "–ú–µ—Ç—Ä–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
        metro: updatedMetro,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–æ:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥ –ø–æ ID –≥–æ—Ä–æ–¥–∞
  createRegionalCity: async (req, res) => {
    const { cityId } = req.params;
    const { title, type } = req.body;

    if (!cityId) {
      return res
        .status(400)
        .json({ error: "ID –≥–æ—Ä–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    if (!title || !type) {
      return res
        .status(400)
        .json({ error: "–ü–æ–ª–µ title –∏ type —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏" });
    }

    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
      const existingCity = await prisma.city.findUnique({
        where: { id: cityId },
      });

      if (!existingCity) {
        return res.status(404).json({ error: "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ –≥–æ—Ä–æ–¥
      const newRegionalCity = await prisma.regionalCity.create({
        data: {
          title,
          type,
          cityId, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
        },
      });

      res.status(201).json({
        message: "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
        regionalCity: newRegionalCity,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
  createRegionalCitiesBulk: async (req, res) => {
    try {
      const { cityId } = req.params;
      const { titles, type } = req.body;

      if (!cityId) {
        return res.status(400).json({ error: "ID –≥–æ—Ä–æ–¥–∞ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ" });
      }
      if (!titles) {
        return res.status(400).json({ error: "–ü–æ–ª–µ titles ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ" });
      }

      // titles –ø—Ä–∏—Ö–æ–¥—è—Ç —Å—Ç—Ä–æ–∫–æ–π: "–ü–∞–≤–ª–æ–≤—Å–∫, –ó–µ–ª–µ–Ω–æ–≥–æ—Ä—Å–∫, –°–µ—Å—Ç—Ä–æ—Ä–µ—Ü–∫"
      const titlesArray = titles
        .split(",")
        .map((t) => t.trim())
        .filter((t) => t.length > 0);

      if (titlesArray.length === 0) {
        return res.status(400).json({ error: "–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç" });
      }

      const regionalCities = titlesArray.map((title) => ({
        title,
        type: type || null,
        cityId,
      }));

      const created = await prisma.regionalCity.createMany({
        data: regionalCities,
      });

      return res.status(201).json({
        message: "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
        count: created.count,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤:", error);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ ID
  updateRegionalCityById: async (req, res) => {
    const { id } = req.params;
    const { title, type } = req.body;

    if (!id) {
      return res
        .status(400)
        .json({ error: "ID —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    if (!title || !type) {
      return res
        .status(400)
        .json({ error: "–ü–æ–ª–µ title –∏ type —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏" });
    }

    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
      const existingRegionalCity = await prisma.regionalCity.findUnique({
        where: { id },
      });

      if (!existingRegionalCity) {
        return res.status(404).json({ error: "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
      const updatedRegionalCity = await prisma.regionalCity.update({
        where: { id },
        data: {
          title,
          type,
        },
      });

      res.status(200).json({
        message: "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        regionalCity: updatedRegionalCity,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },
};

module.exports = LocationController;
