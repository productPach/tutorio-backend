const { prisma } = require("../prisma/prisma-client");
const path = require("path");
const ip2location = require("ip2location-nodejs");

const LocationController = {
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
  createCity: async (req, res) => {
    const { title, area, shortTitle, districts, regionalCities, metros } =
      req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!title || !area || !shortTitle) {
      return res.status(400).json({
        error: "–ü–æ–ª—è title, area –∏ shortTitle —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏",
      });
    }

    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
      const existingCity = await prisma.city.findUnique({
        where: { title },
      });

      if (existingCity) {
        return res.status(400).json({
          error: "–ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        });
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
      const newCity = await prisma.city.create({
        data: {
          title,
          area,
          shortTitle,
          districts: {
            create:
              districts?.map((district) => ({
                title: district.title,
                type: district.type,
              })) || [],
          },
          regionalCities: {
            create:
              regionalCities?.map((regionalCity) => ({
                title: regionalCity.title,
              })) || [],
          },
          metros: {
            create:
              metros?.map((metro) => ({
                title: metro.title,
                color: metro.color || null,
                lineName: metro.lineName || null,
                lineNumber: metro.lineNumber || null,
                cityPrefix: metro.cityPrefix || null,
              })) || [],
          },
        },
      });

      res.status(201).json(newCity);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
  createCitiesBulk: async (req, res) => {
    const { cities } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!cities || !Array.isArray(cities)) {
      return res.status(400).json({
        error: "–ü–æ–ª–µ cities —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º",
      });
    }

    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
      for (const city of cities) {
        if (!city.title || !city.area || !city.shortTitle || !city.slug) {
          return res.status(400).json({
            error: `–ì–æ—Ä–æ–¥ ${city.title || "–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}:
–ü–æ–ª—è title, area, shortTitle –∏ slug —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏`,
          });
        }
      }

      const results = [];
      const errors = [];

      // –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ –æ–¥–Ω–æ–º—É
      for (const cityData of cities) {
        try {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
          const existingCityByTitle = await prisma.city.findUnique({
            where: { title: cityData.title },
          });

          if (existingCityByTitle) {
            errors.push({
              title: cityData.title,
              error: "–ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            });
            continue;
          }

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å —Ç–∞–∫–∏–º –∂–µ slug
          const existingCityBySlug = await prisma.city.findUnique({
            where: { slug: cityData.slug },
          });

          if (existingCityBySlug) {
            errors.push({
              title: cityData.title,
              error: `–ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º slug '${cityData.slug}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`,
            });
            continue;
          }

          // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
          const newCity = await prisma.city.create({
            data: {
              title: cityData.title,
              area: cityData.area,
              shortTitle: cityData.shortTitle,
              region_name_dative: cityData.region_name_dative || null,
              slug: cityData.slug,
              districts: {
                create:
                  cityData.districts?.map((district) => ({
                    title: district.title,
                    type: district.type,
                  })) || [],
              },
              regionalCities: {
                create:
                  cityData.regionalCities?.map((regionalCity) => ({
                    title: regionalCity.title,
                  })) || [],
              },
              metros: {
                create:
                  cityData.metros?.map((metro) => ({
                    title: metro.title,
                    color: metro.color || null,
                    lineName: metro.lineName || null,
                    lineNumber: metro.lineNumber || null,
                    cityPrefix: metro.cityPrefix || null,
                  })) || [],
              },
            },
            include: {
              districts: true,
              regionalCities: true,
              metros: true,
            },
          });

          results.push({
            id: newCity.id,
            title: newCity.title,
            slug: newCity.slug,
            status: "success",
            districtsCount: newCity.districts.length,
            regionalCitiesCount: newCity.regionalCities.length,
            metrosCount: newCity.metros.length,
          });
        } catch (error) {
          errors.push({
            title: cityData.title,
            error: error.message,
          });
        }
      }

      res.status(201).json({
        message: `–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${results.length} –≥–æ—Ä–æ–¥–æ–≤, –æ—à–∏–±–æ–∫: ${errors.length}`,
        created: results,
        errors: errors,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
  getAllCity: async (req, res) => {
    try {
      const cities = await prisma.city.findMany({
        include: {
          metros: true, // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –Ω–∞–ø—Ä—è–º—É—é —É –≥–æ—Ä–æ–¥–∞
          districts: true, // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–π–æ–Ω—ã –±–µ–∑ –º–µ—Ç—Ä–æ
          regionalCities: true, // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
        },
      });

      res.status(200).json(cities);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ ID
  getCityById: async (req, res) => {
    const { id } = req.params;

    if (!id) {
      return res
        .status(400)
        .json({ error: "ID –≥–æ—Ä–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    try {
      const city = await prisma.city.findUnique({
        where: { id },
        include: {
          metros: true, // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –Ω–∞–ø—Ä—è–º—É—é —É –≥–æ—Ä–æ–¥–∞
          districts: true, // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–π–æ–Ω—ã –±–µ–∑ –º–µ—Ç—Ä–æ
          regionalCities: true, // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
        },
      });

      if (!city) {
        return res.status(404).json({ error: "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      res.status(200).json(city);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ ID:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
  updateCitiesBulk: async (req, res) => {
    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }

      const { cities } = req.body;

      if (!cities || !Array.isArray(cities)) {
        return res.status(400).json({
          error: "–ü–æ–ª–µ cities —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º",
        });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      for (const city of cities) {
        if (!city.id) {
          return res
            .status(400)
            .json({ error: "ID –≥–æ—Ä–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
        }
        if (!city.title) {
          return res
            .status(400)
            .json({ error: "Title —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
        }
        if (!city.slug) {
          return res
            .status(400)
            .json({ error: "Slug —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
        }
      }

      const results = [];
      const errors = [];

      // –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ –æ–¥–Ω–æ–º—É
      for (const cityData of cities) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
          const existingCity = await prisma.city.findUnique({
            where: { id: cityData.id },
          });

          if (!existingCity) {
            errors.push({ id: cityData.id, error: "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
            continue;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å title (–µ—Å–ª–∏ title –º–µ–Ω—è–µ—Ç—Å—è)
          if (cityData.title !== existingCity.title) {
            const titleExists = await prisma.city.findUnique({
              where: { title: cityData.title },
            });

            if (titleExists) {
              errors.push({
                id: cityData.id,
                currentTitle: existingCity.title,
                error: `Title '${cityData.title}' —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–æ—Ä–æ–¥–æ–º —Å ID '${titleExists.id}'`,
              });
              continue;
            }
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug (–µ—Å–ª–∏ slug –º–µ–Ω—è–µ—Ç—Å—è)
          if (cityData.slug !== existingCity.slug) {
            const slugExists = await prisma.city.findFirst({
              where: { slug: cityData.slug },
            });

            if (slugExists) {
              errors.push({
                id: cityData.id,
                currentTitle: existingCity.title,
                error: `Slug '${cityData.slug}' —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–æ—Ä–æ–¥–æ–º '${slugExists.title}'`,
              });
              continue;
            }
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –í–°–ï –ø–æ–ª—è –≥–æ—Ä–æ–¥–∞
          const updatedCity = await prisma.city.update({
            where: { id: cityData.id },
            data: {
              title: cityData.title,
              area: cityData.area,
              shortTitle: cityData.shortTitle,
              region_name_dative: cityData.region_name_dative,
              slug: cityData.slug,
              // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å
            },
          });

          results.push({
            id: cityData.id,
            title: updatedCity.title,
            area: updatedCity.area,
            shortTitle: updatedCity.shortTitle,
            slug: updatedCity.slug,
            region_name_dative: updatedCity.region_name_dative,
            status: "success",
          });
        } catch (error) {
          errors.push({
            id: cityData.id,
            error: error.message,
          });
        }
      }

      res.status(200).json({
        message: `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${results.length} –≥–æ—Ä–æ–¥–æ–≤, –æ—à–∏–±–æ–∫: ${errors.length}`,
        results,
        errors,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ ID (—Ç–æ–ª—å–∫–æ title, area –∏ shortTitle)
  updateCityById: async (req, res) => {
    const { id } = req.params;
    const { title, area, shortTitle, districts, regionalCities, metros } =
      req.body;

    if (!id) {
      return res
        .status(400)
        .json({ error: "ID –≥–æ—Ä–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    if (!title || !area || !shortTitle) {
      return res.status(400).json({
        error: "–ü–æ–ª—è title, area –∏ shortTitle —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏",
      });
    }

    try {
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({ where: { userId } });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }

      const existingCity = await prisma.city.findUnique({
        where: { id },
        include: {
          districts: true,
          regionalCities: true,
          metros: true,
        },
      });

      if (!existingCity) {
        return res.status(404).json({ error: "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º –≥–æ—Ä–æ–¥
      await prisma.city.update({
        where: { id },
        data: { title, area, shortTitle },
      });

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ districts
      if (districts?.length) {
        for (const district of districts) {
          if (district.id) {
            await prisma.district.update({
              where: { id: district.id },
              data: {
                title: district.title,
                type: district.type,
              },
            });
          } else {
            await prisma.district.create({
              data: {
                title: district.title,
                type: district.type,
                cityId: id,
              },
            });
          }
        }
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ regionalCities
      if (regionalCities?.length) {
        for (const regCity of regionalCities) {
          if (regCity.id) {
            await prisma.regionalCity.update({
              where: { id: regCity.id },
              data: { title: regCity.title },
            });
          } else {
            await prisma.regionalCity.create({
              data: { title: regCity.title, cityId: id },
            });
          }
        }
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç—Ä–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≥–æ—Ä–æ–¥–∞
      if (metros?.length) {
        for (const metro of metros) {
          if (metro.id) {
            await prisma.metro.update({
              where: { id: metro.id },
              data: {
                title: metro.title,
                color: metro.color || null,
                lineName: metro.lineName || null,
                lineNumber: metro.lineNumber || null,
                cityPrefix: metro.cityPrefix || null,
              },
            });
          } else {
            await prisma.metro.create({
              data: {
                title: metro.title,
                color: metro.color || null,
                lineName: metro.lineName || null,
                lineNumber: metro.lineNumber || null,
                cityPrefix: metro.cityPrefix || null,
                cityId: id,
              },
            });
          }
        }
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –≥–æ—Ä–æ–¥–∞
      const fullCity = await prisma.city.findUnique({
        where: { id },
        include: {
          districts: true,
          regionalCities: true,
          metros: true,
        },
      });

      res.status(200).json({
        message: "–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        city: fullCity,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –≤ –≥–æ—Ä–æ–¥ –ø–æ ID
  createDistrict: async (req, res) => {
    const { cityId } = req.params;
    const { title, type } = req.body;

    if (!title) {
      return res.status(400).json({
        error: "–ü–æ–ª–µ title —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º",
      });
    }

    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥
      const existingCity = await prisma.city.findUnique({
        where: { id: cityId },
      });

      if (!existingCity) {
        return res.status(404).json({
          error: "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–π–æ–Ω –≤ –≥–æ—Ä–æ–¥
      const newDistrict = await prisma.district.create({
        data: {
          title,
          type,
          cityId,
        },
      });

      res.status(201).json({
        message: "–†–∞–π–æ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
        district: newDistrict,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–æ–≤ –≥–æ—Ä–æ–¥–∞ –ø–æ —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –æ–¥–Ω–æ–º—É —Ç–∏–ø—É –¥–ª—è –≤—Å–µ—Ö
  createDistrictsBulk: async (req, res) => {
    const { cityId } = req.params; // id –≥–æ—Ä–æ–¥–∞
    const { districts, type } = req.body; // districts: "–ê, –ë, –í", type: "Area" –∏–ª–∏ "District" –∏ —Ç.–¥.

    if (!cityId) {
      return res
        .status(400)
        .json({ error: "ID –≥–æ—Ä–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    if (!districts || typeof districts !== "string") {
      return res.status(400).json({
        error: "–ü–æ–ª–µ districts –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
      });
    }

    if (!type || typeof type !== "string") {
      return res.status(400).json({
        error: "–ü–æ–ª–µ type —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π",
      });
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏/–∞–¥–º–∏–Ω—ã
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({ where: { userId } });
      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥
      const city = await prisma.city.findUnique({ where: { id: cityId } });
      if (!city) {
        return res.status(404).json({ error: "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
      const districtsArray = districts
        .split(",")
        .map((d) => d.trim())
        .filter(Boolean);

      if (districtsArray.length === 0) {
        return res
          .status(400)
          .json({ error: "–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–π–æ–Ω" });
      }

      // –ü–æ–ª—É—á–∏–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–π–æ–Ω—ã –≥–æ—Ä–æ–¥–∞ (—á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏—Ç—å –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
      const existingDistricts = await prisma.district.findMany({
        where: { cityId },
        select: { id: true, title: true, type: true },
      });

      const existingTitlesLower = new Set(
        existingDistricts.map((d) => d.title.toLowerCase())
      );

      // –í—ã–±–∏—Ä–∞–µ–º, –∫–∞–∫–∏–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å)
      const toCreate = districtsArray.filter(
        (title) => !existingTitlesLower.has(title.toLowerCase())
      );

      const created = [];
      for (const title of toCreate) {
        const createdDistrict = await prisma.district.create({
          data: {
            title,
            type: type.trim(),
            cityId,
          },
        });
        created.push(createdDistrict);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç: —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏ –∏ —á—Ç–æ —É–∂–µ –±—ã–ª–æ
      const skipped = existingDistricts.filter((d) =>
        districtsArray.some((t) => t.toLowerCase() === d.title.toLowerCase())
      );

      if (created.length === 0) {
        return res.status(200).json({
          message:
            "–†–∞–π–æ–Ω—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã ‚Äî –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–∞–π–æ–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –≥–æ—Ä–æ–¥–µ",
          skipped,
        });
      }

      return res.status(201).json({
        message: "–†–∞–π–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
        created,
        skipped,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω–æ–≤:", error);
      return res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –ø–æ ID (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ)
  updateDistrictById: async (req, res) => {
    const { id } = req.params;
    const { title, type } = req.body;

    if (!id) {
      return res
        .status(400)
        .json({ error: "ID —Ä–∞–π–æ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    if (!title || !type) {
      return res
        .status(400)
        .json({ error: "–ü–æ–ª—è title –∏ type —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏" });
    }

    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞
      const existingDistrict = await prisma.district.findUnique({
        where: { id },
      });

      if (!existingDistrict) {
        return res.status(404).json({ error: "–†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞
      const updatedDistrict = await prisma.district.update({
        where: { id },
        data: {
          title,
          type,
        },
      });

      res.status(200).json({
        message: "–†–∞–π–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        district: updatedDistrict,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–æ –≤ –≥–æ—Ä–æ–¥ –ø–æ ID –≥–æ—Ä–æ–¥–∞
  createMetro: async (req, res) => {
    const { cityId } = req.params;
    const { title, color, lineName, lineNumber, cityPrefix } = req.body;

    if (!cityId) {
      return res
        .status(400)
        .json({ error: "ID –≥–æ—Ä–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    if (!title) {
      return res.status(400).json({
        error: "–ü–æ–ª–µ title —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º",
      });
    }

    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({ where: { userId } });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
      const existingCity = await prisma.city.findUnique({
        where: { id: cityId },
      });
      if (!existingCity) {
        return res.status(404).json({ error: "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –º–µ—Ç—Ä–æ –¥–ª—è –≥–æ—Ä–æ–¥–∞
      const newMetro = await prisma.metro.create({
        data: {
          title,
          color: color || null,
          lineName: lineName || null,
          lineNumber: lineNumber || null,
          cityPrefix: cityPrefix || null,
          cityId,
        },
      });

      res.status(201).json({
        message: "–ú–µ—Ç—Ä–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ",
        metro: newMetro,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–æ:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Ç—Ä–æ –≤ –≥–æ—Ä–æ–¥ –ø–æ ID –≥–æ—Ä–æ–¥–∞
  createMetrosToCityBulk: async (req, res) => {
    const { cityId } = req.params;
    const { metros } = req.body;

    if (!cityId) {
      return res
        .status(400)
        .json({ error: "ID –≥–æ—Ä–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    if (!Array.isArray(metros) || metros.length === 0) {
      return res.status(400).json({
        error: "–ü–æ–ª–µ metros –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤ –º–µ—Ç—Ä–æ",
      });
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏/–∞–¥–º–∏–Ω—ã
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({ where: { userId } });
      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥
      const city = await prisma.city.findUnique({ where: { id: cityId } });
      if (!city) {
        return res.status(404).json({ error: "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ
      const createdMetros = [];
      for (const metro of metros) {
        if (!metro.title) continue; // –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

        const newMetro = await prisma.metro.create({
          data: {
            title: metro.title,
            color: metro.color || null,
            lineName: metro.lineName || null,
            lineNumber: metro.lineNumber || null,
            cityPrefix: metro.cityPrefix || null,
            cityId,
          },
        });

        createdMetros.push(newMetro);
      }

      if (createdMetros.length === 0) {
        return res.status(400).json({
          error: "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–æ ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
        });
      }

      res.status(201).json({
        message: "–°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
        created: createdMetros,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–æ:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–æ –ø–æ ID
  updateMetroById: async (req, res) => {
    const { id } = req.params;
    const { title, color, lineName, lineNumber, cityPrefix } = req.body;

    if (!id) {
      return res
        .status(400)
        .json({ error: "ID –º–µ—Ç—Ä–æ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–æ
      const existingMetro = await prisma.metro.findUnique({ where: { id } });

      if (!existingMetro) {
        return res.status(404).json({ error: "–ú–µ—Ç—Ä–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
      const updateData = {};
      if (title !== undefined) updateData.title = title;
      if (color !== undefined) updateData.color = color;
      if (lineName !== undefined) updateData.lineName = lineName;
      if (lineNumber !== undefined) updateData.lineNumber = lineNumber;
      if (cityPrefix !== undefined) updateData.cityPrefix = cityPrefix;

      if (Object.keys(updateData).length === 0) {
        return res.status(400).json({
          error: "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        });
      }

      const updatedMetro = await prisma.metro.update({
        where: { id },
        data: updateData,
      });

      res.status(200).json({
        message: "–ú–µ—Ç—Ä–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
        metro: updatedMetro,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–æ:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥ –ø–æ ID –≥–æ—Ä–æ–¥–∞
  createRegionalCity: async (req, res) => {
    const { cityId } = req.params;
    const { title, type } = req.body;

    if (!cityId) {
      return res
        .status(400)
        .json({ error: "ID –≥–æ—Ä–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    if (!title || !type) {
      return res
        .status(400)
        .json({ error: "–ü–æ–ª–µ title –∏ type —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏" });
    }

    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
      const existingCity = await prisma.city.findUnique({
        where: { id: cityId },
      });

      if (!existingCity) {
        return res.status(404).json({ error: "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ –≥–æ—Ä–æ–¥
      const newRegionalCity = await prisma.regionalCity.create({
        data: {
          title,
          type,
          cityId, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
        },
      });

      res.status(201).json({
        message: "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
        regionalCity: newRegionalCity,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
  createRegionalCitiesBulk: async (req, res) => {
    try {
      const { cityId } = req.params;
      const { titles, type } = req.body;

      if (!cityId) {
        return res.status(400).json({ error: "ID –≥–æ—Ä–æ–¥–∞ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ" });
      }
      if (!titles) {
        return res.status(400).json({ error: "–ü–æ–ª–µ titles ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ" });
      }

      // titles –ø—Ä–∏—Ö–æ–¥—è—Ç —Å—Ç—Ä–æ–∫–æ–π: "–ü–∞–≤–ª–æ–≤—Å–∫, –ó–µ–ª–µ–Ω–æ–≥–æ—Ä—Å–∫, –°–µ—Å—Ç—Ä–æ—Ä–µ—Ü–∫"
      const titlesArray = titles
        .split(",")
        .map((t) => t.trim())
        .filter((t) => t.length > 0);

      if (titlesArray.length === 0) {
        return res.status(400).json({ error: "–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç" });
      }

      const regionalCities = titlesArray.map((title) => ({
        title,
        type: type || null,
        cityId,
      }));

      const created = await prisma.regionalCity.createMany({
        data: regionalCities,
      });

      return res.status(201).json({
        message: "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
        count: created.count,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤:", error);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ ID
  updateRegionalCityById: async (req, res) => {
    const { id } = req.params;
    const { title, type } = req.body;

    if (!id) {
      return res
        .status(400)
        .json({ error: "ID —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º" });
    }

    if (!title || !type) {
      return res
        .status(400)
        .json({ error: "–ü–æ–ª–µ title –∏ type —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏" });
    }

    try {
      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–∞–¥–º–∏–Ω–æ–º)
      const userId = req.user.userID;
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
      const existingRegionalCity = await prisma.regionalCity.findUnique({
        where: { id },
      });

      if (!existingRegionalCity) {
        return res.status(404).json({ error: "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
      const updatedRegionalCity = await prisma.regionalCity.update({
        where: { id },
        data: {
          title,
          type,
        },
      });

      res.status(200).json({
        message: "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        regionalCity: updatedRegionalCity,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // detectUserRegion: async (req, res) => {
  //   try {
  //     console.log("=== detectUserRegion START ===");

  //     // üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –±–µ—Ä–µ–º IP –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
  //     if (req.query.test_ip) {
  //       console.log("üß™ TEST MODE activated with IP:", req.query.test_ip);
  //       const cleanIp = req.query.test_ip;

  //       // –î–∞–ª—å—à–µ —Ç–≤–æ–π –æ–±—ã—á–Ω—ã–π –∫–æ–¥, –Ω–æ —Å test IP
  //       const ipv4BinPath = path.join(
  //         __dirname,
  //         "data",
  //         "ip2location",
  //         "IP2LOCATION-LITE-DB3.BIN"
  //       );
  //       const ipv6BinPath = path.join(
  //         __dirname,
  //         "data",
  //         "ip2location",
  //         "IP2LOCATION-LITE-DB3.IPV6.BIN"
  //       );

  //       const ip2loc4 = new ip2location.IP2Location();
  //       const ip2loc6 = new ip2location.IP2Location();

  //       ip2loc4.open(ipv4BinPath);
  //       ip2loc6.open(ipv6BinPath);

  //       const geo = cleanIp.includes(":")
  //         ? ip2loc6.getAll(cleanIp)
  //         : ip2loc4.getAll(cleanIp);
  //       console.log("üß™ Geo info:", geo);

  //       if (
  //         !geo ||
  //         (geo.countryLong !== "Russian Federation" &&
  //           geo.countryLong !== "Russia")
  //       ) {
  //         return res.status(404).json({
  //           error: "–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ –†–§)",
  //           testIp: cleanIp,
  //           country: geo?.countryLong,
  //         });
  //       }

  //       const regionEn = (geo.region || "").trim();
  //       if (!regionEn) {
  //         return res
  //           .status(404)
  //           .json({ error: "–†–µ–≥–∏–æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ BIN", testIp: cleanIp });
  //       }

  //       const regionMap = require(path.join(
  //         __dirname,
  //         "data",
  //         "ip2location",
  //         "regionMapEnToRu.json"
  //       ));
  //       const regionRu = regionMap[regionEn] || regionEn;
  //       console.log(`üß™ regionEn = ${regionEn}, regionRu = ${regionRu}`);

  //       const cityRecord = await prisma.city.findFirst({
  //         where: {
  //           OR: [
  //             { title: { equals: regionRu, mode: "insensitive" } },
  //             { area: { equals: regionRu, mode: "insensitive" } },
  //           ],
  //         },
  //       });

  //       if (!cityRecord) {
  //         return res.status(404).json({
  //           error: "–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ",
  //           regionEn,
  //           regionRu,
  //           testIp: cleanIp,
  //         });
  //       }

  //       return res.json({ ...cityRecord, _test: true, testIp: cleanIp });
  //     }

  //     // üìç –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (—Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –∫–æ–¥)

  //     // –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–´–ô IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  //     let ip =
  //       req.headers["x-real-ip"] ||
  //       req.headers["x-forwarded-for"]?.split(",")[0] ||
  //       req.connection?.remoteAddress ||
  //       req.socket?.remoteAddress;

  //     console.log("All headers:", req.headers);
  //     console.log("Raw IP from request:", ip);

  //     // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ IP
  //     const isInternalIp = (ip) => {
  //       if (!ip) return true;
  //       return (
  //         ip === "::1" ||
  //         ip === "127.0.0.1" ||
  //         ip.startsWith("172.") ||
  //         ip.startsWith("10.") ||
  //         ip.startsWith("192.168.")
  //       );
  //     };

  //     const cleanIp = isInternalIp(ip) ? "5.167.255.255" : ip;
  //     console.log("IP from request:", ip);
  //     console.log("Clean IP:", cleanIp);

  //     // –ü—É—Ç—å –∫ BIN —Ñ–∞–π–ª–∞–º
  //     const ipv4BinPath = path.join(
  //       __dirname,
  //       "data",
  //       "ip2location",
  //       "IP2LOCATION-LITE-DB3.BIN"
  //     );
  //     const ipv6BinPath = path.join(
  //       __dirname,
  //       "data",
  //       "ip2location",
  //       "IP2LOCATION-LITE-DB3.IPV6.BIN"
  //     );
  //     console.log("IPv4 BIN path:", ipv4BinPath);
  //     console.log("IPv6 BIN path:", ipv6BinPath);

  //     // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã IP2Location
  //     const ip2loc4 = new ip2location.IP2Location();
  //     const ip2loc6 = new ip2location.IP2Location();

  //     // –û—Ç–∫—Ä—ã–≤–∞–µ–º BIN —Ñ–∞–π–ª—ã
  //     ip2loc4.open(ipv4BinPath);
  //     console.log("IPv4 BIN opened");
  //     ip2loc6.open(ipv6BinPath);
  //     console.log("IPv6 BIN opened");

  //     // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–µ–æ —á–µ—Ä–µ–∑ IP2Location
  //     const geo = cleanIp.includes(":")
  //       ? ip2loc6.getAll(cleanIp)
  //       : ip2loc4.getAll(cleanIp);
  //     console.log("Geo info:", geo);

  //     if (!geo || geo.countryLong !== "Russian Federation") {
  //       return res.status(404).json({ error: "–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ –†–§)" });
  //     }

  //     const regionEn = (geo.region || "").trim();
  //     if (!regionEn) {
  //       return res.status(404).json({ error: "–†–µ–≥–∏–æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ BIN" });
  //     }

  //     // JSON-–º–∞–ø–ø–∏–Ω–≥ –≤ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  //     const regionMap = require(path.join(
  //       __dirname,
  //       "data",
  //       "ip2location",
  //       "regionMapEnToRu.json"
  //     ));
  //     const regionRu = regionMap[regionEn] || regionEn;
  //     console.log(`regionEn = ${regionEn}`);
  //     console.log(`regionRu = ${regionRu}`);

  //     // –ò—â–µ–º –≤ –±–∞–∑–µ
  //     const cityRecord = await prisma.city.findFirst({
  //       where: {
  //         OR: [
  //           { title: { equals: regionRu, mode: "insensitive" } },
  //           { area: { equals: regionRu, mode: "insensitive" } },
  //         ],
  //       },
  //     });

  //     if (!cityRecord) {
  //       return res.status(404).json({
  //         error: "–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ",
  //         regionEn,
  //         regionRu,
  //       });
  //     }

  //     return res.json(cityRecord);
  //   } catch (e) {
  //     console.error("detectUserRegion error:", e.message, e.stack);
  //     res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞" });
  //   }
  // },

  detectUserRegion: async (req, res) => {
    try {
      console.log("=== detectUserRegion START ===");
      console.log("Query params:", req.query);

      const { set_cookie, region_id, test_ip } = req.query;
      const shouldSetCookie = set_cookie === "true";
      const manualRegionId = region_id ? parseInt(region_id) : null;

      // üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –±–µ—Ä–µ–º IP –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
      if (test_ip) {
        console.log("üß™ TEST MODE activated with IP:", test_ip);
        const cleanIp = test_ip;

        // –î–∞–ª—å—à–µ —Ç–≤–æ–π –æ–±—ã—á–Ω—ã–π –∫–æ–¥, –Ω–æ —Å test IP
        const ipv4BinPath = path.join(
          __dirname,
          "data",
          "ip2location",
          "IP2LOCATION-LITE-DB3.BIN"
        );
        const ipv6BinPath = path.join(
          __dirname,
          "data",
          "ip2location",
          "IP2LOCATION-LITE-DB3.IPV6.BIN"
        );

        const ip2loc4 = new ip2location.IP2Location();
        const ip2loc6 = new ip2location.IP2Location();

        ip2loc4.open(ipv4BinPath);
        ip2loc6.open(ipv6BinPath);

        const geo = cleanIp.includes(":")
          ? ip2loc6.getAll(cleanIp)
          : ip2loc4.getAll(cleanIp);
        console.log("üß™ Geo info:", geo);

        if (
          !geo ||
          (geo.countryLong !== "Russian Federation" &&
            geo.countryLong !== "Russia")
        ) {
          return res.status(404).json({
            error: "–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ –†–§)",
            testIp: cleanIp,
            country: geo?.countryLong,
          });
        }

        const regionEn = (geo.region || "").trim();
        if (!regionEn) {
          return res
            .status(404)
            .json({ error: "–†–µ–≥–∏–æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ BIN", testIp: cleanIp });
        }

        const regionMap = require(path.join(
          __dirname,
          "data",
          "ip2location",
          "regionMapEnToRu.json"
        ));
        const regionRu = regionMap[regionEn] || regionEn;
        console.log(`üß™ regionEn = ${regionEn}, regionRu = ${regionRu}`);

        const cityRecord = await prisma.city.findFirst({
          where: {
            OR: [
              { title: { equals: regionRu, mode: "insensitive" } },
              { area: { equals: regionRu, mode: "insensitive" } },
            ],
          },
        });

        if (!cityRecord) {
          return res.status(404).json({
            error: "–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ",
            regionEn,
            regionRu,
            testIp: cleanIp,
          });
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞)
        if (shouldSetCookie) {
          res.cookie("region-id", cityRecord.id.toString(), {
            maxAge: 365 * 24 * 60 * 60 * 1000, // 1 –≥–æ–¥
            httpOnly: true,
            secure: process.env.NODE_ENV === "production",
            sameSite: "lax",
          });
          console.log("üß™ Cookie set for test mode:", cityRecord.id);
        }

        return res.json({ ...cityRecord, _test: true, testIp: cleanIp });
      }

      // üîÑ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–ò–û–†–ò–¢–ï–¢–û–í

      let cityRecord;

      // 1. –ü–†–ò–û–†–ò–¢–ï–¢: –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ (region_id –∏–∑ query)
      if (manualRegionId) {
        console.log(`üéØ MANUAL REGION SELECTION: ${manualRegionId}`);
        cityRecord = await prisma.city.findUnique({
          where: { id: manualRegionId },
        });

        if (!cityRecord) {
          return res.status(404).json({
            error: "–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ",
            region_id: manualRegionId,
          });
        }
        console.log(`üéØ Manual region found: ${cityRecord.title}`);
      }
      // 2. –ü–†–ò–û–†–ò–¢–ï–¢: –†–µ–≥–∏–æ–Ω –∏–∑ –∫—É–∫–∏
      else if (req.cookies["region-id"]) {
        const regionIdFromCookie = parseInt(req.cookies["region-id"]);
        console.log(`üç™ REGION FROM COOKIE: ${regionIdFromCookie}`);

        cityRecord = await prisma.city.findUnique({
          where: { id: regionIdFromCookie },
        });

        if (cityRecord) {
          console.log(`üç™ Region from cookie found: ${cityRecord.title}`);
        } else {
          console.log(`üç™ Region from cookie not found, falling back to IP`);
          // –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ –∫—É–∫–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ IP
        }
      }

      // 3. –ü–†–ò–û–†–ò–¢–ï–¢: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ IP (–µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤—ã—à–µ)
      if (!cityRecord) {
        console.log("üìç DETERMINING REGION BY IP");

        // –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–´–ô IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        let ip =
          req.headers["x-real-ip"] ||
          req.headers["x-forwarded-for"]?.split(",")[0] ||
          req.connection?.remoteAddress ||
          req.socket?.remoteAddress;

        console.log("All headers:", req.headers);
        console.log("Raw IP from request:", ip);

        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ IP
        const isInternalIp = (ip) => {
          if (!ip) return true;
          return (
            ip === "::1" ||
            ip === "127.0.0.1" ||
            ip.startsWith("172.") ||
            ip.startsWith("10.") ||
            ip.startsWith("192.168.")
          );
        };

        const cleanIp = isInternalIp(ip) ? "5.167.255.255" : ip;
        console.log("IP from request:", ip);
        console.log("Clean IP:", cleanIp);

        // –ü—É—Ç—å –∫ BIN —Ñ–∞–π–ª–∞–º
        const ipv4BinPath = path.join(
          __dirname,
          "data",
          "ip2location",
          "IP2LOCATION-LITE-DB3.BIN"
        );
        const ipv6BinPath = path.join(
          __dirname,
          "data",
          "ip2location",
          "IP2LOCATION-LITE-DB3.IPV6.BIN"
        );
        console.log("IPv4 BIN path:", ipv4BinPath);
        console.log("IPv6 BIN path:", ipv6BinPath);

        // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã IP2Location
        const ip2loc4 = new ip2location.IP2Location();
        const ip2loc6 = new ip2location.IP2Location();

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º BIN —Ñ–∞–π–ª—ã
        ip2loc4.open(ipv4BinPath);
        console.log("IPv4 BIN opened");
        ip2loc6.open(ipv6BinPath);
        console.log("IPv6 BIN opened");

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–µ–æ —á–µ—Ä–µ–∑ IP2Location
        const geo = cleanIp.includes(":")
          ? ip2loc6.getAll(cleanIp)
          : ip2loc4.getAll(cleanIp);
        console.log("Geo info:", geo);

        if (!geo || geo.countryLong !== "Russian Federation") {
          return res.status(404).json({ error: "–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ –†–§)" });
        }

        const regionEn = (geo.region || "").trim();
        if (!regionEn) {
          return res.status(404).json({ error: "–†–µ–≥–∏–æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ BIN" });
        }

        // JSON-–º–∞–ø–ø–∏–Ω–≥ –≤ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        const regionMap = require(path.join(
          __dirname,
          "data",
          "ip2location",
          "regionMapEnToRu.json"
        ));
        const regionRu = regionMap[regionEn] || regionEn;
        console.log(`regionEn = ${regionEn}`);
        console.log(`regionRu = ${regionRu}`);

        // –ò—â–µ–º –≤ –±–∞–∑–µ
        cityRecord = await prisma.city.findFirst({
          where: {
            OR: [
              { title: { equals: regionRu, mode: "insensitive" } },
              { area: { equals: regionRu, mode: "insensitive" } },
            ],
          },
        });

        if (!cityRecord) {
          return res.status(404).json({
            error: "–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ",
            regionEn,
            regionRu,
          });
        }
      }

      // üç™ –£–°–¢–ê–ù–û–í–ö–ê –ö–£–ö–ò (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ)
      if (shouldSetCookie) {
        const isDevelopment = process.env.NODE_ENV === "development";

        res.cookie("region-id", cityRecord.id.toString(), {
          maxAge: 365 * 24 * 60 * 60 * 1000, // 1 –≥–æ–¥
          httpOnly: true,
          secure: !isDevelopment, // false –≤ development, true –≤ production
          sameSite: "lax",
          domain: isDevelopment ? "localhost" : ".dev-tutorio.ru",
        });
        console.log("üç™ Cookie set:", cityRecord.id);
      }

      // ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢
      console.log("‚úÖ Final region:", {
        id: cityRecord.id,
        title: cityRecord.title,
        slug: cityRecord.slug,
        region_name_dative: cityRecord.region_name_dative,
      });
      return res.json(cityRecord); // –í–∫–ª—é—á–∞—è region_name_dative –∏ slug!
    } catch (e) {
      console.error("detectUserRegion error:", e.message, e.stack);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞" });
    }
  },
};

module.exports = LocationController;
