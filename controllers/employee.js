const { prisma } = require("../prisma/prisma-client");
const path = require("path");
const fs = require("fs");

const EmployeeController = {
  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  createEmployee: async (req, res) => {
    const { name, phone, email, region, role, status } = req.body;
    const userId = req.user.userID;

    if (!name || !phone || !status || !role) {
      return res
        .status(400)
        .json({ error: "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" });
    }

    try {
      const existingEmployee = await prisma.employee.findFirst({
        where: { phone: phone },
      });

      if (existingEmployee) {
        return res.status(400).json({
          error: "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        });
      }

      const employee = await prisma.employee.create({
        data: {
          userId,
          name,
          phone,
          email: email || undefined,
          region: region || undefined,
          role,
          status,
        },
      });

      res.json(employee);
    } catch (error) {
      console.log("Error Create Employee", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  getAllEmployees: async (req, res) => {
    try {
      const allEmployees = await prisma.employee.findMany({
        orderBy: {
          createdAt: "desc",
        },
      });

      if (!allEmployees) {
        return res
          .status(404)
          .json({ error: "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" });
      }

      res.json(allEmployees);
    } catch (error) {
      console.error("Get All Employees Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID
  // getEmployeeById: async (req, res) => {
  //   res.send("getEmployeeById");
  // },
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
  currentEmployee: async (req, res) => {
    try {
      const employee = await prisma.employee.findUnique({
        where: { userId: req.user.userID },
      });

      if (!employee) {
        return res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" });
      }

      res.json(employee);
    } catch (error) {
      console.error("Current Student Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },
  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  // updateEmployee: async (req, res) => {
  //   res.send("updateEmployee");
  // },
  // // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  // deleteEmployee: async (req, res) => {
  //   res.send("deleteEmployee");
  // },

  /***************************************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */
  /*****************–ó–ê–ö–ê–ó–´************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∞–¥–º–∏–Ω–æ–º
  getAllOrdersByAdmin: async (req, res) => {
    const userId = req.user.userID;
    try {
      // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
      const isAdmin = await prisma.employee.findUnique({
        where: {
          userId: userId,
        },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }

      const allOrders = await prisma.order.findMany({
        include: {
          student: {
            include: { user: true },
          },
          chats: {
            include: { tutor: true },
          },
          contracts: {
            where: {
              canceledAt: null,
            },
            select: {
              tutorId: true,
            },
          },
        },
        orderBy: {
          createdAt: "desc",
        },
      });

      if (!allOrders) {
        return res.status(404).json({ error: "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞" });
      }

      res.json(allOrders);
    } catch (error) {
      console.error("Get All Orders Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID –∞–¥–º–∏–Ω–æ–º
  getOrderByIdByAdmin: async (req, res) => {
    const { id } = req.params;
    try {
      const order = await prisma.order.findUnique({
        where: { id },
        include: {
          student: true,
          chats: {
            include: {
              tutor: true,
              student: true,
              // messages: true,
            },
          },
          contracts: {
            where: {
              canceledAt: null,
            },
            select: {
              tutorId: true,
              tutor: {
                select: {
                  id: true,
                  name: true,
                  avatarUrl: true,
                  publicRating: true,
                  reviewsCount: true,
                },
              },
            },
          },
        },
      });

      if (!order) {
        return res.status(404).json({ error: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const selectedTutors = Array.isArray(order.contracts)
        ? order.contracts.map((c) => ({
            id: c.tutorId,
            name: c.tutor?.name ?? "",
            avatarUrl: c.tutor?.avatarUrl ?? "",
            publicRating: c.tutor?.publicRating,
            reviewsCount: c.tutor?.reviewsCount,
          }))
        : [];

      res.json({
        ...order,
        selectedTutors,
      });
    } catch (error) {
      console.error("Get Order By Id Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º
  updateOrderByAdmin: async (req, res) => {
    const { id } = req.params;
    const {
      studentType,
      studentYears,
      studentClass,
      studentCourse,
      studentUniversity,
      studentExam,
      studyMethod,
      studyProgramm,
      deadline,
      studentLevel,
      tutorGender,
      studentSchedule,
      studentPlace,
      studentAdress,
      studentHomeLoc,
      studentTrip,
      tutorType,
      autoContactsOnResponse,
      studentWishes,
      region,
      responseCost,
      status,
    } = req.body;
    const userId = req.user.userID;

    try {
      // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
      const isAdmin = await prisma.employee.findUnique({
        where: {
          userId: userId,
        },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }

      // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      const order = await prisma.order.findUnique({
        where: { id },
        include: {
          student: true,
        },
      });

      if (!order) {
        return res.status(404).json({ error: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const updatedOrder = await prisma.order.update({
        where: { id },
        data: {
          studentType: studentType || undefined,
          studentYears: studentYears || undefined,
          studentClass: studentClass || undefined,
          studentCourse: studentCourse || undefined,
          studentUniversity: studentUniversity || undefined,
          studentExam: studentExam || undefined,
          studyMethod: studyMethod || undefined,
          studyProgramm: studyProgramm || undefined,
          deadline: deadline || undefined,
          studentLevel: studentLevel || undefined,
          tutorGender: tutorGender || undefined,
          studentSchedule: studentSchedule || undefined,
          studentPlace: studentPlace || undefined,
          studentAdress: studentAdress || undefined,
          studentHomeLoc: studentHomeLoc || undefined,
          studentTrip: studentTrip || undefined,
          tutorType: tutorType || undefined,
          autoContactsOnResponse: autoContactsOnResponse ?? false,
          studentWishes: studentWishes || undefined,
          region: region || undefined,
          responseCost: responseCost || undefined,
          status: status || undefined,
        },
        include: {
          chats: {
            include: {
              tutor: true,
              messages: true,
            },
          },
          contracts: {
            where: {
              canceledAt: null,
            },
            select: {
              tutorId: true,
              tutor: {
                select: {
                  id: true,
                  name: true,
                  avatarUrl: true,
                  publicRating: true,
                  reviewsCount: true,
                },
              },
            },
          },
        },
      });

      const selectedTutors = Array.isArray(updatedOrder.contracts)
        ? updatedOrder.contracts.map((c) => ({
            id: c.tutorId,
            name: c.tutor?.name ?? "",
            avatarUrl: c.tutor?.avatarUrl ?? "",
            publicRating: c.tutor?.publicRating,
            reviewsCount: c.tutor?.reviewsCount,
          }))
        : [];

      res.json({
        ...updatedOrder,
        selectedTutors,
      });
    } catch (error) {
      console.error("Update Order by Admin Error", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º
  deleteOrderByAdmin: async (req, res) => {
    const { id } = req.params;
    const userId = req.user.userID;

    try {
      // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
      const isAdmin = await prisma.employee.findUnique({
        where: {
          userId: userId,
        },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }

      // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      const order = await prisma.order.findUnique({
        where: { id },
      });

      if (!order) {
        return res.status(404).json({ error: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // üóë –£–¥–∞–ª–µ–Ω–∏–µ
      await prisma.order.delete({ where: { id } });
      res.send("–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º");
    } catch (error) {
      console.error("Delete Order by Admin Error", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  /***************************************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */
  /*****************–†–ï–ü–ï–¢–ò–¢–û–†–´************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
  getAllTutorsByAdmin: async (req, res) => {
    try {
      const allTutors = await prisma.tutor.findMany({
        orderBy: {
          createdAt: "desc",
        },
        include: {
          user: true,
          educations: true,
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
          contracts: true,
          reviews: true,
        },
      });

      if (!allTutors) {
        return res
          .status(404)
          .json({ error: "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞" });
      }

      res.json(allTutors);
    } catch (error) {
      console.error("Get All Tutors Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ ID
  getTutorByIdByAdmin: async (req, res) => {
    const { id } = req.params;

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
        include: {
          user: {
            include: {
              deletedRequests: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            },
          },
          educations: true,
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
          contracts: {
            include: {
              order: true,
            },
          },
          reviews: {
            include: {
              student: true,
              tutor: true,
              order: true,
              comments: true,
            },
          },
        },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      res.json({ tutor });
    } catch (error) {
      console.error("Get Tutor By Id Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∞–¥–º–∏–Ω–æ–º
  updateTutorByAdmin: async (req, res) => {
    const { id } = req.params;
    const userId = req.user.userID;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const isAdmin = await prisma.employee.findUnique({
      where: { userId },
    });

    if (!isAdmin) {
      return res
        .status(403)
        .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
    }

    const {
      name,
      email,
      isVerifedEmail,
      telegram,
      skype,
      subject,
      subjectComments,
      region,
      tutorPlace,
      tutorAdress,
      tutorHomeLoc,
      tutorTrip,
      tutorTripCityData,
      tutorTripCity,
      tutorTripArea,
      profileInfo,
      experience,
      badges,
      isGroup,
      status,
      isPublicProfile,
      isStudentResponses,
      isNotifications,
      isNotificationsOrders,
      isNotificationsResponse,
      isNotificationsPromo,
      isNotificationsSms,
      isNotificationsEmail,
      isNotificationsTelegram,
      isNotificationsMobilePush,
      isNotificationsWebPush,
      isNotificationsVk,
      hasQualityAvatar,
    } = req.body;

    let avatarUrl;
    if (req.file) {
      avatarUrl = req.file.filename;
    }

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
        include: { subjectPrices: true, educations: true },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const oldSubjects = tutor.subject || [];
      const newSubjects = subject || [];
      const removedSubjects = oldSubjects.filter(
        (subj) => !newSubjects.includes(subj)
      );

      if (subject !== undefined && removedSubjects.length > 0) {
        await prisma.tutorSubjectPrice.deleteMany({
          where: {
            tutorId: id,
            subjectId: { in: removedSubjects },
          },
        });
      }

      let updatedComments = tutor.subjectComments;

      if (subject !== undefined) {
        updatedComments = updatedComments.filter(
          (comment) => !removedSubjects.includes(comment.subjectId)
        );
      }

      if (subjectComments !== undefined) {
        const newSubjectIds = subjectComments.map((c) => c.subjectId);
        updatedComments = updatedComments.filter((comment) =>
          newSubjectIds.includes(comment.subjectId)
        );

        for (const newComment of subjectComments) {
          const existingIndex = updatedComments.findIndex(
            (c) => c.subjectId === newComment.subjectId
          );
          if (existingIndex !== -1) {
            updatedComments[existingIndex] = newComment;
          } else {
            updatedComments.push(newComment);
          }
        }
      }

      // üìå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á—ë—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ–ª–∞–≥–æ–≤
      const autoHasSubjectPrices =
        tutor.subjectPrices && tutor.subjectPrices.length > 0;
      const autoHasPriceComments =
        Array.isArray(updatedComments) &&
        updatedComments.some((c) => c.comment && c.comment.trim().length > 0);
      const profileText = profileInfo || tutor.profileInfo || "";
      const autoHasProfileInfo = profileText.replace(/\s/g, "").length >= 300;
      const autoHasEducation = tutor.educations && tutor.educations.length > 0;
      const autoHasEducationPhotos =
        tutor.educations &&
        tutor.educations.some(
          (edu) =>
            Array.isArray(edu.educationDiplomUrl) &&
            edu.educationDiplomUrl.length > 0
        );

      const currentTime = new Date();

      const updatedTutor = await prisma.tutor.update({
        where: { id },
        data: {
          name: name || undefined,
          email: email || undefined,
          isVerifedEmail:
            isVerifedEmail !== undefined
              ? isVerifedEmail
              : tutor.isVerifedEmail,
          telegram: telegram || undefined,
          skype: skype || undefined,
          avatarUrl: avatarUrl ? `/uploads/${avatarUrl}` : tutor.avatarUrl,
          subject: subject || undefined,
          region: region || undefined,
          tutorPlace: tutorPlace || undefined,
          tutorAdress: tutorAdress || undefined,
          tutorHomeLoc: tutorHomeLoc || undefined,
          tutorTrip: tutorTrip || undefined,
          tutorTripCityData: tutorTripCityData || undefined,
          tutorTripCity: tutorTripCity || undefined,
          tutorTripArea: tutorTripArea || undefined,
          profileInfo: profileInfo || undefined,
          experience: experience || undefined,
          badges: badges !== undefined ? badges : tutor.badges,
          isGroup: isGroup !== undefined ? isGroup : tutor.isGroup,
          isPublicProfile:
            isPublicProfile !== undefined
              ? isPublicProfile
              : tutor.isPublicProfile,
          isStudentResponses:
            isStudentResponses !== undefined
              ? isStudentResponses
              : tutor.isStudentResponses,
          isNotifications:
            isNotifications !== undefined
              ? isNotifications
              : tutor.isNotifications,
          isNotificationsOrders:
            isNotificationsOrders !== undefined
              ? isNotificationsOrders
              : tutor.isNotificationsOrders,
          isNotificationsResponse:
            isNotificationsResponse !== undefined
              ? isNotificationsResponse
              : tutor.isNotificationsResponse,
          isNotificationsPromo:
            isNotificationsPromo !== undefined
              ? isNotificationsPromo
              : tutor.isNotificationsPromo,
          isNotificationsSms:
            isNotificationsSms !== undefined
              ? isNotificationsSms
              : tutor.isNotificationsSms,
          isNotificationsEmail:
            isNotificationsEmail !== undefined
              ? isNotificationsEmail
              : tutor.isNotificationsEmail,
          isNotificationsTelegram:
            isNotificationsTelegram !== undefined
              ? isNotificationsTelegram
              : tutor.isNotificationsTelegram,
          isNotificationsVk:
            isNotificationsVk !== undefined
              ? isNotificationsVk
              : tutor.isNotificationsVk,
          isNotificationsMobilePush:
            isNotificationsMobilePush !== undefined
              ? isNotificationsMobilePush
              : tutor.isNotificationsMobilePush,
          isNotificationsWebPush:
            isNotificationsWebPush !== undefined
              ? isNotificationsWebPush
              : tutor.isNotificationsWebPush,

          hasQualityAvatar:
            hasQualityAvatar !== undefined
              ? hasQualityAvatar
              : tutor.hasQualityAvatar,

          hasSubjectPrices: autoHasSubjectPrices,
          hasPriceComments: autoHasPriceComments,
          hasProfileInfo: autoHasProfileInfo,
          hasEducation: autoHasEducation,
          hasEducationPhotos: autoHasEducationPhotos,

          status: status || undefined,
          ...(subject !== undefined || subjectComments !== undefined
            ? {
                subjectComments: JSON.parse(
                  JSON.stringify([...updatedComments])
                ),
              }
            : {}),
        },
        include: { subjectPrices: true },
      });

      const tutorNew = await prisma.tutor.findUnique({
        where: { id },
        include: {
          educations: true,
          subjectPrices: true,
        },
      });

      res.json(tutorNew);
    } catch (error) {
      console.error("Update Tutor by Admin Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∞–¥–º–∏–Ω–æ–º
  // –°–î–ï–õ–ê–¢–¨ –£–î–ê–õ–ï–ù–ò–ï –§–û–¢–û–ì–†–ê–§–ò–ô –ê–í–ê–¢–ê–†–û–í –ò –î–û–ö–£–ú–ï–ù–¢–û–í!! –û–¢–ö–õ–ò–ö–ò –ò –ü–ï–†–ï–ü–ò–°–ö–£ –ù–ï –£–î–ê–õ–Ø–¢–¨
  deleteTutorByAdmin: async (req, res) => {
    const { id } = req.params;
    const userId = req.user.userID;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
      const isAdmin = await prisma.employee.findUnique({
        where: { userId },
      });

      if (!isAdmin) {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" });
      }

      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // // –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª–∏–∫–∏ —ç—Ç–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
      // await prisma.response.deleteMany({
      //   where: {
      //     tutorId: id,
      //   },
      // });

      // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
      await prisma.tutor.delete({
        where: { id },
      });

      res.send("–†–µ–ø–µ—Ç–∏—Ç–æ—Ä —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
    } catch (error) {
      console.error("Delete Tutor by Admin Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
  deleteRequestTutorByAdmin: async (req, res) => {
    const { id } = req.params;
    const { answer } = req.body; // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
      const existingRequest = await prisma.deletedRequest.findUnique({
        where: {
          userId_role: {
            userId: tutor.userId,
            role: "tutor",
          },
        },
      });

      if (existingRequest) {
        return res
          .status(409)
          .json({ message: "–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π
      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + 30);

      const deleteRequest = await prisma.deletedRequest.create({
        data: {
          userId: tutor.userId,
          role: "tutor", // –¢–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å
          answer, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è
          requestedAt: new Date(),
          expiresAt,
        },
      });

      res.status(201).json(deleteRequest);
    } catch (error) {
      console.error("Delete Request Tutor Error", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  updateTutorAvatarByAdmin: async (req, res) => {
    const { id } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if (!req.file) {
      return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω" });
    }

    const avatarUrl = req.file.filename; // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
      const updatedTutor = await prisma.tutor.update({
        where: { id },
        data: {
          avatarUrl: `/uploads/${avatarUrl}`, // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        },
      });

      res.json(updatedTutor);
    } catch (error) {
      console.error("Update Tutor Avatar Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
  deleteTutorAvatarByAdmin: async (req, res) => {
    try {
      const { id } = req.params;

      // –ù–∞–π—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ message: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä
      if (!tutor.avatarUrl) {
        return res
          .status(400)
          .json({ message: "–£ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è" });
      }

      // –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
      const avatarPath = path.resolve(
        "uploads",
        tutor.avatarUrl.replace(/^\/uploads\//, "")
      ); // –£–±–∏—Ä–∞–µ–º /uploads –∏–∑ –ø—É—Ç–∏
      if (fs.existsSync(avatarPath)) {
        fs.unlinkSync(avatarPath); // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
      const updatedTutor = await prisma.tutor.update({
        where: { id },
        data: {
          avatarUrl: null, // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        },
      });

      res.json(updatedTutor);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  addEducationByAdmin: async (req, res) => {
    const {
      educationInfo,
      educationStartYear,
      educationEndYear,
      isShowDiplom,
    } = req.body;
    const { id } = req.params;

    if (!educationInfo || !educationStartYear) {
      return res
        .status(400)
        .json({ error: "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" });
    }

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      let diplomaUrls = [];

      if (req.files && req.files.length > 0) {
        diplomaUrls = req.files.map(
          (file) => `/uploads/diplomas/${file.filename}`
        );
      }

      const education = await prisma.tutorEducation.create({
        data: {
          tutorId: id,
          educationInfo,
          educationStartYear: educationStartYear,
          educationEndYear: educationEndYear ? educationEndYear : null,
          educationDiplomUrl: diplomaUrls, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Å–∏–≤ URL
          isShowDiplom: isShowDiplom === "true",
        },
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è)
      const educations = await prisma.tutorEducation.findMany({
        where: { tutorId: id },
      });

      const hasEducation = educations.length > 0;
      const hasEducationPhotos = educations.some(
        (edu) =>
          Array.isArray(edu.educationDiplomUrl) &&
          edu.educationDiplomUrl.length > 0
      );

      const updatedTutor = await prisma.tutor.update({
        where: { id },
        data: {
          hasEducation,
          hasEducationPhotos,
        },
        include: {
          educations: true,
          subjectPrices: true,
        },
      });

      res.json(updatedTutor);
    } catch (error) {
      console.error("Error adding education:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  updateEducationByAdmin: async (req, res) => {
    const {
      educationInfo,
      educationStartYear,
      educationEndYear,
      isShowDiplom,
    } = req.body;
    const { id, educationId } = req.params; // id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏ id –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è

    if (!educationInfo || !educationStartYear) {
      return res
        .status(400)
        .json({ error: "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" });
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      let diplomaUrls = [];

      if (req.files && req.files.length > 0) {
        diplomaUrls = req.files.map(
          (file) => `/uploads/diplomas/${file.filename}`
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
      const education = await prisma.tutorEducation.findUnique({
        where: { id: educationId },
      });

      if (!education) {
        return res.status(404).json({ error: "–ú–µ—Å—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      const updatedEducation = await prisma.tutorEducation.update({
        where: { id: educationId },
        data: {
          educationInfo,
          educationStartYear,
          educationEndYear,
          educationDiplomUrl:
            diplomaUrls.length > 0
              ? [...education.educationDiplomUrl, ...diplomaUrls] // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∏–ø–ª–æ–º—ã –∫ —Å—Ç–∞—Ä—ã–º
              : education.educationDiplomUrl, // –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö –¥–∏–ø–ª–æ–º–æ–≤ –Ω–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
          isShowDiplom: isShowDiplom === "true", // –ï—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        },
      });

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      const educations = await prisma.tutorEducation.findMany({
        where: { tutorId: id },
      });

      // –ü–µ—Ä–µ—Å—á—ë—Ç autoHasEducationPhotos
      const autoHasEducationPhotos = educations.some(
        (edu) =>
          Array.isArray(edu.educationDiplomUrl) &&
          edu.educationDiplomUrl.length > 0
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —Å –º–µ—Å—Ç–∞–º–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      const updatedTutor = await prisma.tutor.update({
        where: { id },
        data: {
          hasEducationPhotos: autoHasEducationPhotos,
        },
        include: {
          educations: true,
          subjectPrices: true,
        },
      });

      res.json(updatedTutor);
    } catch (error) {
      console.error("Error updating education:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  deleteEducationByAdmin: async (req, res) => {
    const { id, educationId } = req.params; // id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏ id –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
      const education = await prisma.tutorEducation.findUnique({
        where: { id: educationId },
      });

      if (!education) {
        return res.status(404).json({ error: "–ú–µ—Å—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
      }

      // –ï—Å–ª–∏ —É –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –µ—Å—Ç—å —Ñ–∞–π–ª—ã –¥–∏–ø–ª–æ–º–æ–≤, —É–¥–∞–ª—è–µ–º –∏—Ö
      if (
        education.educationDiplomUrl &&
        Array.isArray(education.educationDiplomUrl)
      ) {
        education.educationDiplomUrl.forEach((diplomUrl) => {
          const diplomPath = path.resolve(
            "uploads/diplomas", // –ü–∞–ø–∫–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∏–ø–ª–æ–º—ã
            diplomUrl.replace(/^\/uploads\/diplomas\//, "") // –£–±–∏—Ä–∞–µ–º /uploads/diplomas –∏–∑ –ø—É—Ç–∏
          );

          if (fs.existsSync(diplomPath)) {
            try {
              fs.unlinkSync(diplomPath); // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–∏–ø–ª–æ–º–∞
            } catch (err) {
              console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: ${diplomPath}`, err);
            }
          }
        });
      }

      // –£–¥–∞–ª—è–µ–º –º–µ—Å—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      await prisma.tutorEducation.delete({
        where: { id: educationId },
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è)
      const educations = await prisma.tutorEducation.findMany({
        where: { tutorId: id },
      });

      const hasEducation = educations.length > 0;
      const hasEducationPhotos = educations.some(
        (edu) =>
          Array.isArray(edu.educationDiplomUrl) &&
          edu.educationDiplomUrl.length > 0
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —Å –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
      const updatedTutor = await prisma.tutor.update({
        where: { id },
        data: { hasEducation, hasEducationPhotos },
        include: {
          educations: true,
          subjectPrices: true,
        },
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
      res.json(updatedTutor);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  deleteDiplomaByAdmin: async (req, res) => {
    const { id, educationId } = req.params;
    const { fileName } = req.body; // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞

    try {
      const tutor = await prisma.tutor.findUnique({
        where: { id },
      });

      if (!tutor) {
        return res.status(404).json({ error: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const education = await prisma.tutorEducation.findUnique({
        where: { id: educationId },
      });

      if (!education) {
        return res.status(404).json({ error: "–ú–µ—Å—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
      }

      // –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
      const filePath = path.resolve("uploads/diplomas", fileName); // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath); // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–∏–ø–ª–æ–º–∞—Ö
      const updatedEducation = await prisma.tutorEducation.update({
        where: { id: educationId },
        data: {
          educationDiplomUrl: {
            // –£–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞
            set: education.educationDiplomUrl.filter(
              (url) => !url.includes(fileName)
            ),
          },
        },
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —Å –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
      const updatedTutor = await prisma.tutor.findUnique({
        where: { id },
        include: {
          educations: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        },
      });

      return res.json(updatedTutor);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ:", error);
      res.status(500).json({ error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ" });
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
  addSubjectPriceByAdmin: async (req, res) => {
    const { tutorId, subjectId, format, price, duration } = req.body;

    try {
      await prisma.tutorSubjectPrice.create({
        data: {
          tutorId,
          subjectId,
          format,
          price: Number(price),
          duration,
        },
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
      const tutor = await prisma.tutor.findUnique({
        where: { id: tutorId },
        include: {
          educations: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        }, // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã
      });

      res.status(201).json(tutor);
    } catch (error) {
      console.error("Add Subject Price Error:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
  updateSubjectPriceByAdmin: async (req, res) => {
    const { id } = req.params; // –ë–µ—Ä–µ–º ID —Ü–µ–Ω—ã –∏–∑ URL
    const { price, duration } = req.body;

    try {
      const existingPrice = await prisma.tutorSubjectPrice.findUnique({
        where: { id },
      });

      if (!existingPrice) {
        return res.status(404).json({ error: "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }

      await prisma.tutorSubjectPrice.update({
        where: { id },
        data: {
          price: Number(price),
          duration,
        },
      });

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —Å —Ü–µ–Ω–∞–º–∏
      const tutor = await prisma.tutor.findUnique({
        where: { id: existingPrice.tutorId },
        include: {
          educations: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
          subjectPrices: true, // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        },
      });

      res.json(tutor);
    } catch (error) {
      console.error("Update Subject Price Error:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã" });
    }
  },

  // –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
  deleteRequestStudentByAdmin: async (req, res) => {
    const { id } = req.params;
    const { answer } = req.body; // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è

    try {
      const student = await prisma.student.findUnique({
        where: { id },
      });

      if (!student) {
        return res.status(404).json({ error: "–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
      const existingRequest = await prisma.deletedRequest.findUnique({
        where: {
          userId_role: {
            userId: student.userId,
            role: "student",
          },
        },
      });

      if (existingRequest) {
        return res
          .status(409)
          .json({ message: "–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π
      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + 30);

      const deleteRequest = await prisma.deletedRequest.create({
        data: {
          userId: student.userId,
          role: "student", // –¢–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å
          answer, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è
          requestedAt: new Date(),
          expiresAt,
        },
      });

      res.status(201).json(deleteRequest);
    } catch (error) {
      console.error("Delete Request Student Error", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  initTutorFieldsOnce: async (req, res) => {
    try {
      const tutors = await prisma.tutor.findMany({
        select: { id: true },
      });

      let updatedCount = 0;

      for (const tutor of tutors) {
        await prisma.tutor.update({
          where: { id: tutor.id },
          data: {
            publicRating: 4.5,
            internalRating: 4.5,
            employeesRating: 0,
            contractCount: 0,
            contractRejectCount: 0,
            averagePay: 0,
            refundsPayCount: 0,
            reviewsCount: 0,
            averageReviewScore: 0,
            responseTimeSeconds: 0,
            responseCount: 0,
            sessionCount: 0,
            hasQualityAvatar: false,
            hasSubjectPrices: false,
            hasPriceComments: false,
            hasProfileInfo: false,
            hasEducation: false,
            hasEducationPhotos: false,
          },
        });

        updatedCount++;
      }

      res.json({ message: `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤` });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–µ–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö" });
    }
  },

  /***************************************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */
  /*****************–ß–ê–¢–´******************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Ç–æ–≤
  updateChats: async (req, res) => {
    const { orderId, status } = req.body;

    if (!orderId) {
      return res.status(400).json({ error: "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω orderId" });
    }

    try {
      const updatedChats = await prisma.chat.updateMany({
        where: { orderId },
        data: {
          ...(status !== undefined ? { status } : {}),
        },
      });

      res.json({
        message: "–°—Ç–∞—Ç—É—Å—ã —á–∞—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
        updatedCount: updatedChats.count,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–æ–≤:", error.message);
      res.status(500).json({
        error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–æ–≤",
        details: error.message,
      });
    }
  },

  /***************************************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */
  /*****************–û–¢–ó–´–í–´******************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */
  /***************************************** */

  // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
  createReviewByAdmin: async (req, res) => {
    const { orderId, message, authorRole, tutorId, studentId, rating } =
      req.body;

    if (!orderId || !message || !authorRole || typeof rating !== "number") {
      return res.status(400).json({ error: "–ü–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    if (rating < 1 || rating > 5) {
      return res.status(400).json({ error: "–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5" });
    }

    try {
      const order = await prisma.order.findUnique({ where: { id: orderId } });
      if (!order) return res.status(404).json({ error: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });

      const review = await prisma.review.create({
        data: {
          orderId,
          message,
          authorRole,
          rating,
          tutorId: authorRole === "tutor" ? tutorId : undefined,
          studentId: authorRole === "student" ? studentId : undefined,
          status: "Pending",
        },
      });

      res.json(review);
    } catch (e) {
      console.error("createReviewByAdmin error:", e);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
  createCommentByAdmin: async (req, res) => {
    const { reviewId, text, senderId } = req.body;

    if (!reviewId || !text || !senderId) {
      return res.status(400).json({ error: "–ü–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    try {
      const review = await prisma.review.findUnique({
        where: { id: reviewId },
      });
      if (!review) return res.status(404).json({ error: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" });

      const comment = await prisma.comment.create({
        data: {
          reviewId,
          text,
          senderId,
          senderRole: "admin",
        },
      });

      res.json(comment);
    } catch (e) {
      console.error("createCommentByAdmin error:", e);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
  updateReviewByAdmin: async (req, res) => {
    const { id } = req.params;
    const { message, status, rating } = req.body;

    if (
      rating !== undefined &&
      (typeof rating !== "number" || rating < 1 || rating > 5)
    ) {
      return res.status(400).json({ error: "–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5" });
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏ –∞–π–¥–∏—à–Ω–∏–∫–∏, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–æ–º—É –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
      const existingReview = await prisma.review.findUnique({
        where: { id },
        select: {
          authorRole: true,
          tutorId: true,
          studentId: true,
        },
      });

      if (!existingReview) {
        return res.status(404).json({ error: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const updated = await prisma.review.update({
        where: { id },
        data: {
          ...(message !== undefined && { message }),
          ...(status !== undefined && { status }),
          ...(rating !== undefined && { rating }),
        },
        select: {
          id: true,
          tutorId: true,
          studentId: true,
          status: true,
        },
      });

      const isActive = updated.status === "Active";

      // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä ‚Äî —Å—Ç—É–¥–µ–Ω—Ç, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
      if (
        isActive &&
        existingReview.authorRole === "student" &&
        updated.tutorId
      ) {
        const activeReviews = await prisma.review.findMany({
          where: {
            tutorId: updated.tutorId,
            status: "Active",
            rating: { not: null },
            authorRole: "student",
          },
          select: { rating: true },
        });

        const averageRating =
          activeReviews.reduce((acc, r) => acc + r.rating, 0) /
          activeReviews.length;

        await prisma.tutor.update({
          where: { id: updated.tutorId },
          data: {
            publicRating: Number(averageRating.toFixed(1)),
          },
        });
      }

      // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä ‚Äî —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —É—á–µ–Ω–∏–∫–∞
      if (
        isActive &&
        existingReview.authorRole === "tutor" &&
        updated.studentId
      ) {
        const activeReviews = await prisma.review.findMany({
          where: {
            studentId: updated.studentId,
            status: "Active",
            rating: { not: null },
            authorRole: "tutor",
          },
          select: { rating: true },
        });

        const averageRating =
          activeReviews.reduce((acc, r) => acc + r.rating, 0) /
          activeReviews.length;

        await prisma.student.update({
          where: { id: updated.studentId },
          data: {
            publicRating: Number(averageRating.toFixed(1)),
          },
        });
      }

      res.json(updated);
    } catch (e) {
      console.error("updateReviewByAdmin error:", e);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
  updateCommentByAdmin: async (req, res) => {
    const { id } = req.params;
    const { text } = req.body;

    if (!text) return res.status(400).json({ error: "–¢–µ–∫—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });

    try {
      const updated = await prisma.comment.update({
        where: { id },
        data: { text },
      });

      res.json(updated);
    } catch (e) {
      console.error("updateCommentByAdmin error:", e);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ (–≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
  getAllReviews: async (req, res) => {
    try {
      const reviews = await prisma.review.findMany({
        orderBy: { createdAt: "desc" },
        include: {
          comments: {
            orderBy: { createdAt: "asc" },
          },
          tutor: {
            select: { id: true, name: true },
          },
          student: {
            select: { id: true, name: true },
          },
          order: {
            select: { id: true, subject: true, goal: true },
          },
        },
      });

      res.json(reviews);
    } catch (e) {
      console.error("getAllReviews error:", e);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },
};

module.exports = EmployeeController;
