const { prisma } = require("../prisma/prisma-client");

const StudentController = {
  // –°–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞
  createStudent: async (req, res) => {
    const { name, phone, email, avatarUrl, region, status } = req.body;
    const userId = req.user.userID;

    if (!name || !phone || !region || !status) {
      return res
        .status(400)
        .json({ error: "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" });
    }

    try {
      const existingStudent = await prisma.student.findFirst({
        where: { phone: phone },
      });

      if (existingStudent) {
        return res.status(400).json({
          error: "–£—á–µ–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        });
      }

      const student = await prisma.student.create({
        data: {
          userId,
          name,
          phone,
          email: email || undefined,
          avatarUrl,
          region,
          status,
        },
      });
      res.json(student);
    } catch (error) {
      console.log("Error Create Student", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  verifyEmailStudent: async (req, res) => {
    const { token } = req.query;

    if (!token) {
      return res.status(400).json({ error: "–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    try {
      // üîπ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º tutorId –∏ email
      const decoded = jwt.verify(token, process.env.SECRET_KEY);
      const { studentId, email } = decoded;

      // üîπ –ò—â–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ ID –∏ email
      const student = await prisma.student.findUnique({
        where: { id: studentId, email },
      });

      if (!student) {
        return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω" });
      }

      // üîπ –ï—Å–ª–∏ email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
      if (student.isVerifedEmail) {
        return res.status(400).json({ error: "Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" });
      }

      // üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
      await prisma.student.update({
        where: { id: studentId },
        data: {
          isVerifedEmail: true,
        },
      });

      res.json({ message: "Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω" });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:", error.message);
      res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
  getAllStudents: async (req, res) => {
    try {
      const allStudents = await prisma.student.findMany({
        orderBy: {
          createdAt: "desc",
        },
      });

      if (!allStudents) {
        return res.status(404).json({ error: "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞" });
      }

      res.json(allStudents);
    } catch (error) {
      console.error("Get All Students Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –ø–æ ID
  getStudentById: async (req, res) => {
    const { id } = req.params;

    try {
      const student = await prisma.student.findUnique({ where: { id } });

      if (!student) {
        return res.status(404).json({ error: "–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      res.json({ student });
    } catch (error) {
      console.error("Get Student By Id Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
  currentStudent: async (req, res) => {
    try {
      const student = await prisma.student.findUnique({
        where: { userId: req.user.userID },
      });

      if (!student) {
        return res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–µ–Ω–∏–∫–∞" });
      }

      res.json(student);
    } catch (error) {
      console.error("Current Student Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞
  updateStudent: async (req, res) => {
    const { id } = req.params;

    const {
      name,
      email,
      telegram,
      skype,
      region,
      status,
      isVerifedEmail,
      isNotifications,
      isNotificationsResponse,
      isNotificationsPromo,
      isNotificationsSms,
      isNotificationsEmail,
      isNotificationsTelegram,
      isNotificationsMobilePush,
      isNotificationsWebPush,
      isNotificationsVk,
    } = req.body;

    try {
      const student = await prisma.student.findUnique({
        where: { id },
      });

      if (!student) {
        return res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–µ–Ω–∏–∫–∞" });
      }

      if (student.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      const updateStudent = await prisma.student.update({
        where: { id },
        data: {
          name: name || undefined,
          email: email || undefined,
          isVerifedEmail:
            isVerifedEmail !== undefined
              ? isVerifedEmail
              : student.isVerifedEmail,
          telegram: telegram || undefined,
          skype: skype || undefined,
          region: region || undefined,
          status: status || undefined,
          isNotifications:
            isNotifications !== undefined
              ? isNotifications
              : student.isNotifications,

          isNotificationsResponse:
            isNotificationsResponse !== undefined
              ? isNotificationsResponse
              : student.isNotificationsResponse,
          isNotificationsPromo:
            isNotificationsPromo !== undefined
              ? isNotificationsPromo
              : student.isNotificationsPromo,
          isNotificationsSms:
            isNotificationsSms !== undefined
              ? isNotificationsSms
              : student.isNotificationsSms,
          isNotificationsEmail:
            isNotificationsEmail !== undefined
              ? isNotificationsEmail
              : student.isNotificationsEmail,
          isNotificationsTelegram:
            isNotificationsTelegram !== undefined
              ? isNotificationsTelegram
              : student.isNotificationsTelegram,
          isNotificationsVk:
            isNotificationsVk !== undefined
              ? isNotificationsVk
              : student.isNotificationsVk,
          isNotificationsMobilePush:
            isNotificationsMobilePush !== undefined
              ? isNotificationsMobilePush
              : student.isNotificationsMobilePush,
          isNotificationsWebPush:
            isNotificationsWebPush !== undefined
              ? isNotificationsWebPush
              : student.isNotificationsWebPush,
        },
      });

      // if (phone !== undefined) {
      //   const tutor = await prisma.tutor.findUnique({
      //     where: { userId: userID },
      //   });

      //   if (tutor) {
      //     await prisma.tutor.update({
      //       where: { userId: userID },
      //       data: {
      //         phone: phone || undefined,
      //       },
      //     });
      //   }
      // }

      res.json(updateStudent);
    } catch (error) {
      console.error("Update Student Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞
  deleteStudent: async (req, res) => {
    const { id } = req.params;

    try {
      const student = await prisma.student.findUnique({
        where: { id },
      });

      if (!student) {
        return res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–µ–Ω–∏–∫–∞" });
      }

      if (student.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      await prisma.order.deleteMany({
        where: {
          studentId: id,
        },
      });

      await prisma.student.delete({
        where: { id },
      });

      res.send("–£—á–µ–Ω–∏–∫ —É–¥–∞–ª–µ–Ω");
    } catch (error) {
      console.error("Delete Student Error", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  // –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç —É—á–µ–Ω–∏–∫–∞
  deleteRequest: async (req, res) => {
    const { id } = req.params;
    const { answer } = req.body; // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è

    try {
      const student = await prisma.student.findUnique({
        where: { id },
      });

      if (!student) {
        return res.status(404).json({ error: "–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (student.userId !== req.user.userID) {
        return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
      const existingRequest = await prisma.deletedRequest.findUnique({
        where: {
          userId_role: {
            userId: student.userId,
            role: "student",
          },
        },
      });

      if (existingRequest) {
        return res
          .status(409)
          .json({ message: "–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π
      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + 30);

      const deleteRequest = await prisma.deletedRequest.create({
        data: {
          userId: student.userId,
          role: "student", // –¢–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å
          answer, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è
          requestedAt: new Date(),
          expiresAt,
        },
      });

      res.status(201).json(deleteRequest);
    } catch (error) {
      console.error("Delete Request Student Error", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  },
};

module.exports = StudentController;
