const { prisma } = require("../../prisma/prisma-client");
const { ratingQueue } = require("../../queue/ratingQueue");
const { calculateMedians } = require("../medians/calculateMedians");

const BATCH_SIZE = 500;

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–µ—Ä–µ—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
 */
async function recalculateAllTutorRatings() {
  console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤—Å–µ—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤...");

  // 1Ô∏è‚É£ –°—á–∏—Ç–∞–µ–º –º–µ–¥–∏–∞–Ω—ã –¥–ª—è –≤—Å–µ—Ö
  const { medianResponses, medianContracts } = await calculateMedians();
  console.log("üìä –ú–µ–¥–∏–∞–Ω—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã:", { medianResponses, medianContracts });

  // 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
  const totalTutors = await prisma.tutor.count();
  console.log(`üë©‚Äçüè´ –í—Å–µ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤: ${totalTutors}`);

  // 3Ô∏è‚É£ –ü—Ä–æ—Ö–æ–¥–∏–º –±–∞—Ç—á–∞–º–∏
  for (let skip = 0; skip < totalTutors; skip += BATCH_SIZE) {
    const tutors = await prisma.tutor.findMany({
      skip,
      take: BATCH_SIZE,
      select: { id: true, userRating: true }, // –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ id, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ–¥–≥—Ä—É–∑–∏—Ç –≤–æ—Ä–∫–µ—Ä
    });

    const jobs = tutors.map((t) => ({
      name: "calculateTutorRating",
      data: {
        tutorId: t.id,
        userRating: t.userRating,
        medianResponses,
        medianContracts,
      },
    }));

    // 4Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    await ratingQueue.addBulk(jobs);

    console.log(
      `üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: ${jobs.length} (—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã ${skip + 1}‚Äì${
        skip + jobs.length
      })`
    );
  }

  console.log("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–µ—Ä–µ—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å!");
}

module.exports = { recalculateAllTutorRatings };
